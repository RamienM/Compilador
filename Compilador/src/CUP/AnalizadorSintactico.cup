package CUP;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;

import java_cup.runtime.*;

import Symbols.*;
import CUP.*;

import java.io.PrintStream;
import java.util.HashMap;

class Parser;

parser code {:
    private HashMap<String, Integer>tsymbolsI = new HashMap<>();
    private HashMap<String, Boolean>tsymbolsB = new HashMap<>();

    public int getSymbolValueInteger(String id){
        return (int)tsymbolsI.get(id);
    }
    public boolean getSymbolValueBoolean(String id){
        return (boolean)tsymbolsB.get(id);
    }
    
    public boolean estaInteger(String id){
        return tsymbolsI.containsKey(id);
    }
    public boolean estaBoolean(String id){
        return tsymbolsB.containsKey(id);
    }

    public void addSymbol(String id, int value){
        if(tsymbolsI.get(id) == null){
            tsymbolsI.put(id,value);
        } else{
            tsymbolsI.replace(id,value);
        }
    }
    public void addSymbol(String id, boolean value){
        if(tsymbolsB.get(id) == null){
            tsymbolsB.put(id,value);
        } else{
            tsymbolsB.replace(id,value);
        }
    }
    
    public void printVars(PrintStream out) {
        if (tsymbolsI.size() == 0) {
            out.println("No hi ha variables enteras declarades");
        } else {
            String fmt = "%-8s: %d";
            tsymbolsI.forEach((k,v) -> out.println(String.format(fmt,k,v)));
        }
        if (tsymbolsB.size() == 0) {
            out.println("No hi ha variables booleanas declarades");
        } else {
            String fmt = "%-8s: %b";
            tsymbolsB.forEach((k,v) -> out.println(String.format(fmt,k,v)));
        }
    }

    /**
    * Nos permite saber si se ha detectado un error:
    *   -true: Se ha detectado error
    *   -false: No se ha detectado error
    * En caso de true el funcionamiento será limitado hasta finalizar de procesar
    * la entrada, caso donde lo vuelve a poner a false.
    **/
    private boolean errorSemantic = false;
    
    /*
        -------------------GESTION DE ERRORES---------------------------
    */

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception{
        report_error("Error sintactico irrecuperable", cur_token);
        done_parsing();
    }

    @Override
    public void syntax_error(Symbol cur_token){
        report_error("de sintaxis", cur_token);
    }
    
    @Override
    public void report_error(String message, Object info){
        StringBuilder msg = new StringBuilder("ERROR:");
        if(info instanceof Symbol){
            ComplexSymbol token = (ComplexSymbol) info;
            Location l = token.getLeft();

            if(l != null){
                msg.append(" (fila: " + l.getLine() + ", columna: " + l.getColumn() + ")");
            }
        }
        msg.append(": " + message);
        
        System.err.println(msg);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception{
        report_error("Error irrecuperable (" + message + ")", info);
        done_parsing();
    }
    
:}


terminal String IDENTIFICADOR;
terminal int valor;

//Terminales de operaciones aritméticas
terminal SUMA, RESTA, MULTIPLICACION, DIVISION, MODULO;
//Terminales de operaciones relacionales
terminal EQUIVALENTE, MENORIGUAL, MAYORIGUAL, MAYOR, MENOR, NOEQUIVALENTE;
//Terminales de operaciones lógicas
terminal AND, OR, XOR, NOT;
//Parentesis, llaves y asignacion
terminal LPARENTESIS, RPARENTESIS, LLLAVE, RLLAVE, ASIGNACION;
//Puntos y comas
terminal PUNTOCOMA, COMA, PUNTO;
//Condicionales
terminal IF, ELSE;
//Bucles
terminal WHILE, DO, FOR;
//Palabras reservadas
terminal RETURN, MAIN, INT, BOOL, PROC, FUNT, BREAK, PRINT, PRINTLN, ENTER, ENTERLN, TRUE, FALSE;

non terminal Bloque;
non terminal BloqueP;

non terminal Procedimiento;
non terminal Funcion;
non terminal Main;

non terminal Atributos;
non terminal AtributosP;

non terminal Instrucciones;

non terminal SymbolDatos Datos;


non terminal Condicionales;
non terminal Bucles;
non terminal While;
non terminal Do;
non terminal For;
non terminal Returns;
non terminal Prints;
non terminal Enters;

non terminal Asignaciones;

non terminal SymbolID ID;

non terminal Else;

non terminal SymbolOperaciones Operaciones;

non terminal SymbolExpresiones Expresiones;

non terminal SymbolOperacionesAritmeticas OperacionesAritmeticas;
non terminal Incremento;



precedence right ASIGNACION; 
precedence left  SUMA, RESTA, MULTIPLICACION, DIVISION, MODULO;
precedence left  EQUIVALENTE, NOEQUIVALENTE, MAYORIGUAL, MAYOR, MENORIGUAL, MENOR, AND, OR, XOR, NOT;

start with Bloque;

Bloque ::= 
    BloqueP Bloque   
            {::}
    | 
            {::} 
        ;

BloqueP ::= 
    Procedimiento   
            {::}
    | Funcion       
            {::}
    | Main             
            {::}
        ;

Procedimiento ::= 
    PROC IDENTIFICADOR LPARENTESIS Atributos RPARENTESIS LLLAVE Instrucciones RLLAVE  
            {::}
        ;

Funcion ::= 
    FUNT IDENTIFICADOR LPARENTESIS Atributos RPARENTESIS LLLAVE Instrucciones RLLAVE  
            {::}
        ;

Atributos ::= 
    Datos IDENTIFICADOR AtributosP    
            {::}
        ;

AtributosP ::= 
    COMA Atributos   
            {::}
    |   
            {::}
        ;

Main ::= 
    MAIN LLLAVE Instrucciones RLLAVE   
            {::}
        ;

Instrucciones ::= 
    Asignaciones Instrucciones
            {::}
    | Condicionales Instrucciones
            {::}
    | Bucles Instrucciones       
            {::}
    | Returns Instrucciones      
            {::}
    | BREAK Instrucciones
            {::}
    | Prints Instrucciones
            {::}  
    |
            {::}
        ;

Asignaciones ::= 
    Datos:v IDENTIFICADOR:v1 ASIGNACION Operaciones:v2 PUNTOCOMA  
            {:
                switch((int)v.value){
                    case ParserSym.INT ->{
                        if (v2.value instanceof Integer){
                            if((!estaBoolean(v1))&&(!estaInteger(v1))){
                                addSymbol(v1,(int)v2.value); 
                                RESULT = new SymbolAsignaciones((int)v2.value);
                            }else{
                                System.out.println("El identificador "+v1+" ya se ha definido con anterioridad");
                            }
                        }else{
                            System.out.println("Se está añadiendo un booleano a un entero");
                        }
                    }
                    case ParserSym.BOOL ->{
                        if (v2.value instanceof Boolean){
                            if((!estaBoolean(v1))&&(!estaInteger(v1))){
                                addSymbol(v1,(boolean)v2.value); 
                                RESULT = new SymbolAsignaciones((boolean)v2.value);
                            }else{
                                System.out.println("El identificador "+v1+" ya se ha definido con anterioridad");
                            }
                        }else{
                            System.out.println("Se está añadiendo un entero a un booleano");
                        }
                    }
                }
            :}
    |IDENTIFICADOR:v1 ASIGNACION Operaciones:v2 PUNTOCOMA       
            {: 
                if (v2.value instanceof Integer){
                    if((!estaBoolean(v1))&&(estaInteger(v1))){
                        addSymbol(v1,(int)v2.value); 
                        RESULT = new SymbolAsignaciones((int)v2.value);
                     }else if(estaBoolean(v1)){
                        System.out.println("El identificador "+v1+" es un boolano, estas añadiendo un entero");
                     }else{
                        System.out.println("El identificador "+v1+" no se ha definido con anteriodidad");
                     }
                }else{
                    if((estaBoolean(v1))&&(!estaInteger(v1))){
                        addSymbol(v1,(int)v2.value); 
                        RESULT = new SymbolAsignaciones((int)v2.value);
                     }else if(estaInteger(v1)){
                        System.out.println("El identificador "+v1+" es un entero, estas añadiendo un booleano");
                     }else{
                        System.out.println("El identificador "+v1+" no se ha definido con anteriodidad");
                     }
                }
            :}
        ;


Datos ::= 
    INT 
            {:
                RESULT = new SymbolDatos(ParserSym.INT);
            :}
    | BOOL 
            {:
                RESULT = new SymbolDatos(ParserSym.BOOL);
            :}
        ;

Operaciones::=
    OperacionesAritmeticas:v
            {:
                RESULT = new SymbolOperaciones((int)v.value);
            :}
    |Expresiones:v
            {:
                RESULT = new SymbolOperaciones((boolean)v.value);
            :}
    |ID:v
            {:
                if(v.value instanceof Boolean){
                    RESULT = new SymbolOperaciones((boolean)v.value);
                }else{
                    RESULT = new SymbolOperaciones((int)v.value);
                } 
            :}

        ;

Condicionales ::= 
    IF LPARENTESIS Expresiones RPARENTESIS LLLAVE Instrucciones RLLAVE Else   
            {::}
        ;

Else ::= 
    ELSE LLLAVE Instrucciones RLLAVE  
            {::}
    | 
            {::}  
        ;

Bucles ::= 
    While    
            {::}
    |Do    
            {::}
    |For
            {::}
        ;

While ::= 
    WHILE LPARENTESIS Expresiones RPARENTESIS LLLAVE Instrucciones RLLAVE 
            {::}
        ;

Do ::= 
    DO LLLAVE Instrucciones RLLAVE WHILE LPARENTESIS Expresiones RPARENTESIS PUNTOCOMA 
            {::}
        ;

For::=
    FOR LPARENTESIS Asignaciones PUNTOCOMA Expresiones PUNTOCOMA Incremento RPARENTESIS LLLAVE Instrucciones RLLAVE 
            {::}
        ;

Returns ::= 
    RETURN ID:v PUNTOCOMA 
            {:
                //RESULT = new SymbolReturns(v.value);
            :}
        ;

Prints::=
    PRINT
            {:
            :}
    |PRINTLN
            {:
            :}
        ;
Enters::=
    ENTER
            {:
            :}
    |ENTERLN
            {:
            :}
        ;

ID ::= 
    IDENTIFICADOR:v 
            {:
                if(estaInteger(v)){
                    int valor = getSymbolValueInteger(v);
                    RESULT = new SymbolID(valor);
                }else if (estaBoolean(v)){
                    boolean valor = getSymbolValueBoolean(v);
                    RESULT = new SymbolID(valor);
                }
            :}
    | valor :v
            {:
                RESULT = new SymbolID(v);
            :}
        ;
Expresiones ::= 
    Operaciones:v1 AND Operaciones:v2      
            {:
                RESULT = new SymbolExpresiones(v1, ParserSym.AND,v2);
            :}
    |Operaciones:v1 OR Operaciones:v2      
            {:
                RESULT = new SymbolExpresiones(v1, ParserSym.OR,v2);
            :}
    |Operaciones:v1 XOR Operaciones:v2     
            {:
                RESULT = new SymbolExpresiones(v1, ParserSym.XOR,v2);
            :}
    |Operaciones:v1 EQUIVALENTE Operaciones:v2   
            {:
                RESULT = new SymbolExpresiones(v1, ParserSym.EQUIVALENTE,v2);      
            :}
    |Operaciones:v1 NOEQUIVALENTE Operaciones:v2  
            {:
                RESULT = new SymbolExpresiones(v1, ParserSym.NOEQUIVALENTE,v2); 
            :}
    |Operaciones:v1 MAYORIGUAL Operaciones:v2    
            {:
                RESULT = new SymbolExpresiones(v1, ParserSym.MAYORIGUAL,v2);
            :}
    |Operaciones:v1 MAYOR Operaciones:v2        
            {:
                RESULT = new SymbolExpresiones(v1, ParserSym.MAYOR,v2);
            :}
    |Operaciones:v1 MENORIGUAL Operaciones:v2   
            {:
                RESULT = new SymbolExpresiones(v1, ParserSym.MENORIGUAL,v2);
            :}
    |Operaciones:v1 MENOR Operaciones:v2      
            {:
                RESULT = new SymbolExpresiones(v1, ParserSym.MENOR,v2); 
            :}
    |NOT Operaciones:v                
            {:
                if(v.value instanceof Boolean){
                    RESULT = new SymbolExpresiones(!(boolean)v.value);
                }else{
                    System.out.println("Se está pasando por parametro un entero cuando debería ser booleano");
                    RESULT = new SymbolExpresiones();
                }
            :}
    |TRUE
            {:
                RESULT = new SymbolExpresiones(true);
            :}
    |FALSE
            {:
                RESULT = new SymbolExpresiones(false);
            :}
        ;


OperacionesAritmeticas::= 
    Operaciones:v1 SUMA Operaciones:v2  
            {:
                RESULT = new SymbolOperacionesAritmeticas((int)v1.value,ParserSym.SUMA, v2);
            :}
    |Operaciones:v1 RESTA Operaciones:v2  
            {:
                RESULT = new SymbolOperacionesAritmeticas((int)v1.value,ParserSym.RESTA, v2);
            :}
    |Operaciones:v1 MULTIPLICACION Operaciones:v2
            {:
                RESULT = new SymbolOperacionesAritmeticas((int)v1.value,ParserSym.MULTIPLICACION, v2);
            :}
    |Operaciones:v1 DIVISION Operaciones:v2
            {:
                RESULT = new SymbolOperacionesAritmeticas((int)v1.value,ParserSym.DIVISION, v2);
            :}
    |Operaciones:v1 MODULO Operaciones:v2
            {:
                RESULT = new SymbolOperacionesAritmeticas((int)v1.value,ParserSym.MODULO, v2);
            :}
    |RESTA Operaciones:v
            {:
                RESULT = new SymbolOperacionesAritmeticas(-1 * (int)v.value);
            :}
        ;
    