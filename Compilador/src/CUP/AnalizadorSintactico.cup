package CUP;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;

import java_cup.runtime.*;

import Symbols.*;
import CUP.*;

import java.io.PrintStream;
import java.util.HashMap;

class Parser;

parser code {:
    private HashMap<String, Integer>tsymbols = new HashMap<>();

    public int getSymbolValueInteger(String id){
        return (int) tsymbols.get(id);
    }
    
    public void addSymbol(String id, int value){
        if(tsymbols.get(id) == null){
            tsymbols.put(id,value);
        } else{
            tsymbols.replace(id,value);
        }
    }
    
    public void printVars(PrintStream out) {
        if (tsymbols.size() == 0) {
            out.println("No hi ha variables declarades");
        } else {
            String fmt = "%-8s: %f";
            tsymbols.forEach((k,v) -> out.println(String.format(fmt,k,v)));
        }
    }

    /**
    * Nos permite saber si se ha detectado un error:
    *   -true: Se ha detectado error
    *   -false: No se ha detectado error
    * En caso de true el funcionamiento será limitado hasta finalizar de procesar
    * la entrada, caso donde lo vuelve a poner a false.
    **/
    private boolean errorSemantic = false;
    
    /*
        -------------------GESTION DE ERRORES---------------------------
    */

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception{
        report_error("Error sintactico irrecuperable", cur_token);
        done_parsing();
    }

    @Override
    public void syntax_error(Symbol cur_token){
        report_error("de sintaxis", cur_token);
    }
    
    @Override
    public void report_error(String message, Object info){
        StringBuilder msg = new StringBuilder("ERROR:");
        if(info instanceof Symbol){
            ComplexSymbol token = (ComplexSymbol) info;
            Location l = token.getLeft();

            if(l != null){
                msg.append(" (fila: " + l.getLine() + ", columna: " + l.getColumn() + ")");
            }
        }
        msg.append(": " + message);
        
        System.err.println(msg);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception{
        report_error("Error irrecuperable (" + message + ")", info);
        done_parsing();
    }
    
:}


terminal String IDENTIFICADOR;
terminal int valor;

//Terminales de operaciones aritméticas
terminal SUMA, RESTA, MULTIPLICACION, DIVISION, MODULO;
//Terminales de operaciones relacionales
terminal EQUIVALENTE, MENORIGUAL, MAYORIGUAL, MAYOR, MENOR, NOEQUIVALENTE;
//Terminales de operaciones lógicas
terminal AND, OR, XOR, NOT;
//Parentesis, llaves y asignacion
terminal LPARENTESIS, RPARENTESIS, LLLAVE, RLLAVE, ASIGNACION;
//Puntos y comas
terminal PUNTOCOMA, COMA, PUNTO;
//Condicionales
terminal IF, ELSE;
//Bucles
terminal WHILE, DO, FOR;
//Palabras reservadas
terminal RETURN, MAIN, INT, BOOL, PROC, FUNT, BREAK, PRINT, PRINTLN, ENTER, ENTERLN,CONST;

non terminal Bloque;
non terminal BloqueP;

non terminal Procedimiento;
non terminal Funcion;
non terminal Main;

non terminal Atributos;
non terminal AtributosP;

non terminal Instrucciones;

non terminal Datos;


non terminal Condicionales;
non terminal Bucles;
non terminal While;
non terminal Do;
non terminal Returns;

non terminal Asignaciones;
//non terminal AsignacionesP;

non terminal SymbolID ID;

non terminal Else;

non terminal SymbolExpresiones Expresiones;
non terminal SymbolExpresionesP ExpresionesP;
non terminal SymbolExp Exp;

non terminal SymbolOperacionesAritmeticas OperacionesAritmeticas;
non terminal SymbolOperacionesAritmeticasP OperacionesAritmeticasP;
non terminal SymbolMultiplicacionDivision MultiplicacionDivision;
non terminal SymbolMultiplicacionDivisionP MultiplicacionDivisionP;
non terminal SymbolFinalOperaciones FinalOperaciones;



precedence right ASIGNACION; 
precedence left  SUMA, RESTA, MULTIPLICACION, DIVISION, MODULO;

start with Bloque;

Bloque ::= 
    BloqueP Bloque   
            {::}
    | 
            {::} 
        ;

BloqueP ::= 
    Procedimiento   
            {::}
    | Funcion       
            {::}
    | Main             
            {::}
        ;

Procedimiento ::= 
    PROC IDENTIFICADOR LPARENTESIS Atributos RPARENTESIS LLLAVE Instrucciones RLLAVE  
            {::}
        ;

Funcion ::= 
    FUNT IDENTIFICADOR LPARENTESIS Atributos RPARENTESIS LLLAVE Instrucciones RLLAVE  
            {::}
        ;

Atributos ::= 
    Datos IDENTIFICADOR AtributosP    
            {::}
        ;

AtributosP ::= 
    COMA Atributos   
            {::}
    |   
            {::}
        ;

Main ::= 
    MAIN LLLAVE Instrucciones RLLAVE   
            {::}
        ;

Instrucciones ::= 
    Asignaciones Instrucciones
            {::}
    | Condicionales Instrucciones
            {::}
    | Bucles Instrucciones       
            {::}
    | Returns Instrucciones      
            {::}
    | 
            {::} 
        ;

Asignaciones ::= 
    Datos IDENTIFICADOR:v1 ASIGNACION OperacionesAritmeticas:v2 PUNTOCOMA  
            {:
                addSymbol(v1,(int)v2.value); 
            :}
    |IDENTIFICADOR:v1 ASIGNACION OperacionesAritmeticas:v2 PUNTOCOMA       
            {:
                addSymbol(v1,(int)v2.value); 
            :}
        ;

//AsignacionesP ::= 
//    OperacionesAritmeticas: v    
//            {:
//                RESULT =  new SymbolAsignacionesP((int)v.value);
//            :}
//        ;

Condicionales ::= 
    IF LPARENTESIS Expresiones RPARENTESIS LLLAVE Instrucciones RLLAVE Else   
            {::}
        ;

Else ::= 
    ELSE LLLAVE Instrucciones RLLAVE  
            {::}
    | 
            {::}  
        ;

Bucles ::= 
    While    
            {::}
    |Do    
            {::}
        ;

While ::= 
    WHILE LPARENTESIS Expresiones RPARENTESIS LLLAVE Instrucciones RLLAVE 
            {::}
        ;

Do ::= 
    DO LLLAVE Instrucciones RLLAVE WHILE LPARENTESIS Expresiones RPARENTESIS PUNTOCOMA 
            {::}
        ;

Returns ::= 
    RETURN ID:v PUNTOCOMA 
            {:
                //RESULT = new SymbolReturns(v.value);
            :}
        ;

Datos ::= 
    INT 
            {::}
    | BOOL 
            {::}
        ;

ID ::= 
    IDENTIFICADOR:v 
            {:
                int valor = getSymbolValueInteger(v);
                RESULT = new SymbolID(valor);
            :}
    | valor :v
            {:
                RESULT = new SymbolID((int)v);
            :}
        ;
Expresiones ::= 
    ExpresionesP:v1 AND Expresiones:v2    
            {:
                RESULT = new SymbolExpresiones((boolean)v1.value, ParserSym.AND,v2);
            :}
    |ExpresionesP:v1 OR Expresiones:v2    
            {:
                RESULT = new SymbolExpresiones((boolean)v1.value, ParserSym.OR,v2);
            :}
    |ExpresionesP:v1 XOR Expresiones:v2   
            {:
                RESULT = new SymbolExpresiones((boolean)v1.value, ParserSym.XOR,v2);
            :}
    |NOT Exp:v                
            {:
                RESULT = new SymbolExpresiones(ParserSym.NOT,v);
            :}
    |ExpresionesP:v                   
            {:
                RESULT = new SymbolExpresiones((boolean)v.value);
            :}
        ;

ExpresionesP ::= 
    Exp:v1 EQUIVALENTE ExpresionesP:v2       
            {:
                RESULT = new SymbolExpresionesP((int)v1.value, ParserSym.EQUIVALENTE,v2);
            :}
    |Exp:v1 NOEQUIVALENTE ExpresionesP:v2     
            {:
                RESULT = new SymbolExpresionesP((int)v1.value, ParserSym.NOEQUIVALENTE,v2);
            :}
    |ID:v1 MAYORIGUAL ExpresionesP:v2        
            {:
                RESULT = new SymbolExpresionesP((int)v1.value, ParserSym.MAYORIGUAL,v2);
            :}
    |ID:v1 MAYOR ExpresionesP:v2             
            {:
                RESULT = new SymbolExpresionesP((int)v1.value, ParserSym.MAYOR,v2);
            :}
    |ID:v1 MENORIGUAL ExpresionesP:v2        
            {:
                RESULT = new SymbolExpresionesP((int)v1.value, ParserSym.MENORIGUAL,v2);
            :}
    |ID:v1 MENOR ExpresionesP:v2             
            {:
                RESULT = new SymbolExpresionesP((int)v1.value, ParserSym.MENOR,v2);
            :}
        ;

Exp ::= 
    LPARENTESIS Expresiones:v RPARENTESIS      
            {:
                RESULT = new SymbolExp((int)v.value);
            :}
    | ID:v                                     
            {:
                RESULT = new SymbolExp((int)v.value);
            :}
        ;


OperacionesAritmeticas::= 
    MultiplicacionDivision:v1 OperacionesAritmeticasP:v2    
            {:
                RESULT = new SymbolOperacionesAritmeticas((int)v1.value, v2);
            :}
        ;

OperacionesAritmeticasP::= 
    SUMA MultiplicacionDivision:v1 OperacionesAritmeticasP:v2      
            {:
                RESULT = new SymbolOperacionesAritmeticasP(ParserSym.SUMA,(int)v1.value, v2);
            :}
    |RESTA MultiplicacionDivision:v1 OperacionesAritmeticasP:v2  
            {:
                RESULT = new SymbolOperacionesAritmeticasP(ParserSym.RESTA,(int)v1.value, v2);
            :}
    |
            {:
                RESULT = new SymbolOperacionesAritmeticasP();
            :}
        ;

MultiplicacionDivision::= 
    FinalOperaciones:v1 MultiplicacionDivisionP:v2  
            {:
                RESULT = new SymbolMultiplicacionDivision((int)v1.value, v2);
            :}
        ;

MultiplicacionDivisionP ::= 
    MULTIPLICACION FinalOperaciones:v1 MultiplicacionDivisionP:v2 
            {:
                RESULT = new SymbolMultiplicacionDivisionP(ParserSym.MULTIPLICACION,(int)v1.value, v2);
            :}
    |DIVISION FinalOperaciones:v1 MultiplicacionDivisionP:v2      
            {:
                RESULT = new SymbolMultiplicacionDivisionP(ParserSym.DIVISION,(int)v1.value, v2);
            :}
    |MODULO FinalOperaciones:v1 MultiplicacionDivisionP:v2        
            {:
                RESULT = new SymbolMultiplicacionDivisionP(ParserSym.MODULO,(int)v1.value, v2);
            :}
    |
            {:
                RESULT = new SymbolMultiplicacionDivisionP();
            :}
        ;

FinalOperaciones ::=
    LPARENTESIS OperacionesAritmeticas:v RPARENTESIS 
            {:
                RESULT = new SymbolFinalOperaciones((int)v.value);
            :}
    |ID:v
            {:
                RESULT = new SymbolFinalOperaciones((int)v.value);
            :}
    |RESTA OperacionesAritmeticas:v
            {:
                RESULT = new SymbolFinalOperaciones(-1 * (int)v.value);
            :}
        ;
    