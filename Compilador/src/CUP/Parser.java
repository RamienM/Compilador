
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package CUP;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.*;
import Symbols.*;
import CUP.*;
import java.io.PrintStream;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\012\000\002\005\012\000\002\007\005\000" +
    "\002\010\004\000\002\010\002\000\002\006\006\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\002" +
    "\000\002\023\007\000\002\023\007\000\002\024\003\000" +
    "\002\024\002\000\002\013\012\000\002\026\006\000\002" +
    "\026\002\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\015\011\000\002\016\013\000\002\017\015" +
    "\000\002\020\005\000\002\021\003\000\002\021\003\000" +
    "\002\022\003\000\002\022\003\000\002\012\003\000\002" +
    "\012\003\000\002\025\003\000\002\025\003\000\002\027" +
    "\004\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\002\000\002\031\004\000\002\032\004\000" +
    "\002\032\004\000\002\032\004\000\002\032\004\000\002" +
    "\032\004\000\002\032\004\000\002\032\002\000\002\034" +
    "\004\000\002\035\005\000\002\035\005\000\002\035\002" +
    "\000\002\036\004\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\002\000\002\033\005\000\002" +
    "\033\003\000\002\033\004\000\002\033\003\000\002\033" +
    "\003\000\002\040\005\000\002\040\003\000\002\040\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\012\002\uffff\043\007\046\011\047\006\001" +
    "\002\000\012\002\uffff\043\007\046\011\047\006\001\002" +
    "\000\012\002\ufffd\043\ufffd\046\ufffd\047\ufffd\001\002\000" +
    "\004\004\237\001\002\000\004\027\234\001\002\000\004" +
    "\002\233\001\002\000\004\004\014\001\002\000\012\002" +
    "\ufffc\043\ufffc\046\ufffc\047\ufffc\001\002\000\012\002\ufffe" +
    "\043\ufffe\046\ufffe\047\ufffe\001\002\000\004\025\015\001" +
    "\002\000\006\044\021\045\017\001\002\000\004\004\227" +
    "\001\002\000\004\004\uffdb\001\002\000\004\026\022\001" +
    "\002\000\004\004\uffdc\001\002\000\004\027\023\001\002" +
    "\000\030\030\uffef\035\033\037\030\040\034\041\046\042" +
    "\032\044\027\045\043\050\037\051\040\052\036\001\002" +
    "\000\030\030\uffef\035\033\037\030\040\034\041\046\042" +
    "\032\044\027\045\043\050\037\051\040\052\036\001\002" +
    "\000\030\030\uffe5\035\uffe5\037\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\044\uffe5\045\uffe5\050\uffe5\051\uffe5\052\uffe5\001\002" +
    "\000\030\030\uffef\035\033\037\030\040\034\041\046\042" +
    "\032\044\027\045\043\050\037\051\040\052\036\001\002" +
    "\000\004\004\170\001\002\000\004\025\162\001\002\000" +
    "\030\030\uffef\035\033\037\030\040\034\041\046\042\032" +
    "\044\027\045\043\050\037\051\040\052\036\001\002\000" +
    "\006\004\063\005\054\001\002\000\004\025\144\001\002" +
    "\000\004\027\134\001\002\000\030\030\uffef\035\033\037" +
    "\030\040\034\041\046\042\032\044\027\045\043\050\037" +
    "\051\040\052\036\001\002\000\030\030\uffdf\035\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf\045\uffdf\050\uffdf" +
    "\051\uffdf\052\uffdf\001\002\000\030\030\uffef\035\033\037" +
    "\030\040\034\041\046\042\032\044\027\045\043\050\037" +
    "\051\040\052\036\001\002\000\030\030\uffe0\035\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\044\uffe0\045\uffe0\050\uffe0" +
    "\051\uffe0\052\uffe0\001\002\000\030\030\uffef\035\033\037" +
    "\030\040\034\041\046\042\032\044\027\045\043\050\037" +
    "\051\040\052\036\001\002\000\030\030\uffe6\035\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\044\uffe6\045\uffe6\050\uffe6" +
    "\051\uffe6\052\uffe6\001\002\000\004\004\125\001\002\000" +
    "\004\030\124\001\002\000\030\030\uffe7\035\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\042\uffe7\044\uffe7\045\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\001\002\000\004\025\047\001\002\000\006" +
    "\044\027\045\043\001\002\000\004\032\051\001\002\000" +
    "\016\004\063\005\054\024\061\025\056\056\053\057\057" +
    "\001\002\000\014\021\112\022\115\023\114\026\uffd4\032" +
    "\uffd4\001\002\000\030\013\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\026\uffbf\032" +
    "\uffbf\001\002\000\042\006\uffd9\007\uffd9\010\uffd9\011\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\026\uffd9\032\uffd9\001\002" +
    "\000\030\013\077\014\075\015\076\016\101\017\100\020" +
    "\103\021\uffcc\022\uffcc\023\uffcc\026\uffcc\032\uffcc\001\002" +
    "\000\016\004\063\005\054\024\061\025\056\056\053\057" +
    "\057\001\002\000\030\013\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\026\uffbe\032" +
    "\uffbe\001\002\000\030\013\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\026\uffc1\032" +
    "\uffc1\001\002\000\016\004\063\005\054\024\061\025\056" +
    "\056\053\057\057\001\002\000\004\032\064\001\002\000" +
    "\042\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\026\uffda\032\uffda\001\002\000\002\001\002" +
    "\000\004\026\066\001\002\000\004\027\067\001\002\000" +
    "\030\030\uffef\035\033\037\030\040\034\041\046\042\032" +
    "\044\027\045\043\050\037\051\040\052\036\001\002\000" +
    "\004\030\071\001\002\000\030\030\uffe2\035\uffe2\037\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\044\uffe2\045\uffe2\050\uffe2\051" +
    "\uffe2\052\uffe2\001\002\000\030\013\uffc0\014\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\026" +
    "\uffc0\032\uffc0\001\002\000\004\026\074\001\002\000\030" +
    "\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\026\uffc2\032\uffc2\001\002\000\016" +
    "\004\063\005\054\024\061\025\056\056\053\057\057\001" +
    "\002\000\016\004\063\005\054\024\061\025\056\056\053" +
    "\057\057\001\002\000\016\004\063\005\054\024\061\025" +
    "\056\056\053\057\057\001\002\000\016\004\063\005\054" +
    "\024\061\025\056\056\053\057\057\001\002\000\016\004" +
    "\063\005\054\024\061\025\056\056\053\057\057\001\002" +
    "\000\014\021\uffd3\022\uffd3\023\uffd3\026\uffd3\032\uffd3\001" +
    "\002\000\016\004\063\005\054\024\061\025\056\056\053" +
    "\057\057\001\002\000\014\021\uffd1\022\uffd1\023\uffd1\026" +
    "\uffd1\032\uffd1\001\002\000\014\021\uffcf\022\uffcf\023\uffcf" +
    "\026\uffcf\032\uffcf\001\002\000\014\021\uffcd\022\uffcd\023" +
    "\uffcd\026\uffcd\032\uffcd\001\002\000\014\021\uffd2\022\uffd2" +
    "\023\uffd2\026\uffd2\032\uffd2\001\002\000\014\021\uffd0\022" +
    "\uffd0\023\uffd0\026\uffd0\032\uffd0\001\002\000\014\021\uffce" +
    "\022\uffce\023\uffce\026\uffce\032\uffce\001\002\000\016\004" +
    "\063\005\054\024\061\025\056\056\053\057\057\001\002" +
    "\000\006\026\uffd8\032\uffd8\001\002\000\016\004\063\005" +
    "\054\024\061\025\056\056\053\057\057\001\002\000\016" +
    "\004\063\005\054\024\061\025\056\056\053\057\057\001" +
    "\002\000\014\021\112\022\115\023\114\026\uffd4\032\uffd4" +
    "\001\002\000\006\026\uffd6\032\uffd6\001\002\000\014\021" +
    "\112\022\115\023\114\026\uffd4\032\uffd4\001\002\000\006" +
    "\026\uffd5\032\uffd5\001\002\000\014\021\112\022\115\023" +
    "\114\026\uffd4\032\uffd4\001\002\000\006\026\uffd7\032\uffd7" +
    "\001\002\000\012\002\ufffb\043\ufffb\046\ufffb\047\ufffb\001" +
    "\002\000\004\031\126\001\002\000\016\004\063\005\054" +
    "\024\061\025\056\056\053\057\057\001\002\000\004\032" +
    "\130\001\002\000\032\030\uffed\032\uffed\035\uffed\037\uffed" +
    "\040\uffed\041\uffed\042\uffed\044\uffed\045\uffed\050\uffed\051" +
    "\uffed\052\uffed\001\002\000\004\030\ufff5\001\002\000\004" +
    "\030\ufff1\001\002\000\004\030\ufff0\001\002\000\030\030" +
    "\uffef\035\033\037\030\040\034\041\046\042\032\044\027" +
    "\045\043\050\037\051\040\052\036\001\002\000\004\030" +
    "\136\001\002\000\004\037\137\001\002\000\004\025\140" +
    "\001\002\000\016\004\063\005\054\024\061\025\056\056" +
    "\053\057\057\001\002\000\004\026\142\001\002\000\004" +
    "\032\143\001\002\000\030\030\uffe3\035\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\044\uffe3\045\uffe3\050\uffe3\051\uffe3" +
    "\052\uffe3\001\002\000\016\004\063\005\054\024\061\025" +
    "\056\056\053\057\057\001\002\000\004\026\146\001\002" +
    "\000\004\027\147\001\002\000\030\030\uffef\035\033\037" +
    "\030\040\034\041\046\042\032\044\027\045\043\050\037" +
    "\051\040\052\036\001\002\000\004\030\151\001\002\000" +
    "\032\030\uffe8\035\uffe8\036\152\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\044\uffe8\045\uffe8\050\uffe8\051\uffe8\052\uffe8\001" +
    "\002\000\004\027\154\001\002\000\030\030\uffea\035\uffea" +
    "\037\uffea\040\uffea\041\uffea\042\uffea\044\uffea\045\uffea\050" +
    "\uffea\051\uffea\052\uffea\001\002\000\030\030\uffef\035\033" +
    "\037\030\040\034\041\046\042\032\044\027\045\043\050" +
    "\037\051\040\052\036\001\002\000\004\030\156\001\002" +
    "\000\030\030\uffe9\035\uffe9\037\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\044\uffe9\045\uffe9\050\uffe9\051\uffe9\052\uffe9\001\002" +
    "\000\004\032\160\001\002\000\030\030\uffe1\035\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\044\uffe1\045\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\001\002\000\004\030\ufff4\001\002\000" +
    "\016\004\063\005\054\024\061\025\056\056\053\057\057" +
    "\001\002\000\004\026\164\001\002\000\004\027\165\001" +
    "\002\000\030\030\uffef\035\033\037\030\040\034\041\046" +
    "\042\032\044\027\045\043\050\037\051\040\052\036\001" +
    "\002\000\004\030\167\001\002\000\030\030\uffe4\035\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\042\uffe4\044\uffe4\045\uffe4\050" +
    "\uffe4\051\uffe4\052\uffe4\001\002\000\004\031\171\001\002" +
    "\000\012\004\063\005\054\007\173\025\174\001\002\000" +
    "\020\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\026\uffbc" +
    "\032\uffbc\001\002\000\012\004\063\005\054\007\173\025" +
    "\174\001\002\000\012\004\063\005\054\007\173\025\174" +
    "\001\002\000\020\006\uffc3\007\uffc3\010\210\011\212\012" +
    "\211\026\uffc3\032\uffc3\001\002\000\004\032\207\001\002" +
    "\000\020\006\201\007\200\010\uffc8\011\uffc8\012\uffc8\026" +
    "\uffc8\032\uffc8\001\002\000\012\004\063\005\054\007\173" +
    "\025\174\001\002\000\012\004\063\005\054\007\173\025" +
    "\174\001\002\000\020\006\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\026\uffcb\032\uffcb\001\002\000\020\006\201\007" +
    "\200\010\uffc8\011\uffc8\012\uffc8\026\uffc8\032\uffc8\001\002" +
    "\000\020\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\026" +
    "\uffca\032\uffca\001\002\000\020\006\201\007\200\010\uffc8" +
    "\011\uffc8\012\uffc8\026\uffc8\032\uffc8\001\002\000\020\006" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\026\uffc9\032\uffc9" +
    "\001\002\000\032\030\uffee\032\uffee\035\uffee\037\uffee\040" +
    "\uffee\041\uffee\042\uffee\044\uffee\045\uffee\050\uffee\051\uffee" +
    "\052\uffee\001\002\000\012\004\063\005\054\007\173\025" +
    "\174\001\002\000\012\004\063\005\054\007\173\025\174" +
    "\001\002\000\012\004\063\005\054\007\173\025\174\001" +
    "\002\000\020\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\026\uffc7\032\uffc7\001\002\000\020\006\uffc3\007\uffc3\010" +
    "\210\011\212\012\211\026\uffc3\032\uffc3\001\002\000\020" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\026\uffc5\032" +
    "\uffc5\001\002\000\020\006\uffc3\007\uffc3\010\210\011\212" +
    "\012\211\026\uffc3\032\uffc3\001\002\000\020\006\uffc4\007" +
    "\uffc4\010\uffc4\011\uffc4\012\uffc4\026\uffc4\032\uffc4\001\002" +
    "\000\020\006\uffc3\007\uffc3\010\210\011\212\012\211\026" +
    "\uffc3\032\uffc3\001\002\000\020\006\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\026\uffc6\032\uffc6\001\002\000\004\026" +
    "\223\001\002\000\020\006\uffbd\007\uffbd\010\uffbd\011\uffbd" +
    "\012\uffbd\026\uffbd\032\uffbd\001\002\000\020\006\uffbb\007" +
    "\uffbb\010\uffbb\011\uffbb\012\uffbb\026\uffbb\032\uffbb\001\002" +
    "\000\004\030\ufff2\001\002\000\004\030\ufff3\001\002\000" +
    "\006\026\ufff7\033\230\001\002\000\006\044\021\045\017" +
    "\001\002\000\004\026\ufff9\001\002\000\004\026\ufff8\001" +
    "\002\000\004\002\001\001\002\000\030\030\uffef\035\033" +
    "\037\030\040\034\041\046\042\032\044\027\045\043\050" +
    "\037\051\040\052\036\001\002\000\004\030\236\001\002" +
    "\000\012\002\ufff6\043\ufff6\046\ufff6\047\ufff6\001\002\000" +
    "\004\025\240\001\002\000\006\044\021\045\017\001\002" +
    "\000\004\026\242\001\002\000\004\027\243\001\002\000" +
    "\030\030\uffef\035\033\037\030\040\034\041\046\042\032" +
    "\044\027\045\043\050\037\051\040\052\036\001\002\000" +
    "\004\030\245\001\002\000\012\002\ufffa\043\ufffa\046\ufffa" +
    "\047\ufffa\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\014\002\007\003\003\004\012\005\004\006" +
    "\011\001\001\000\014\002\245\003\003\004\012\005\004" +
    "\006\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\017\012\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\011\043\013\030\014\023\015\044\016\041\017\024" +
    "\020\025\021\034\023\040\001\001\000\024\011\225\013" +
    "\030\014\023\015\044\016\041\017\024\020\025\021\034" +
    "\023\040\001\001\000\002\001\001\000\024\011\224\013" +
    "\030\014\023\015\044\016\041\017\024\020\025\021\034" +
    "\023\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\011\160\013\030\014\023\015\044\016\041\017\024" +
    "\020\025\021\034\023\040\001\001\000\004\025\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\011\132" +
    "\013\030\014\023\015\044\016\041\017\024\020\025\021" +
    "\034\023\040\001\001\000\002\001\001\000\024\011\131" +
    "\013\030\014\023\015\044\016\041\017\024\020\025\021" +
    "\034\023\040\001\001\000\002\001\001\000\024\011\130" +
    "\013\030\014\023\015\044\016\041\017\024\020\025\021" +
    "\034\023\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\047\001\001\000\002\001\001\000\012\025\057" +
    "\027\061\031\051\033\054\001\001\000\004\030\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\101" +
    "\001\001\000\012\025\057\027\072\031\051\033\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\057" +
    "\033\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\011\067\013\030\014\023\015\044\016\041\017" +
    "\024\020\025\021\034\023\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\057\033\110\001\001\000\006" +
    "\025\057\033\107\001\001\000\006\025\057\033\106\001" +
    "\001\000\006\025\057\033\105\001\001\000\006\025\057" +
    "\033\104\001\001\000\002\001\001\000\006\025\057\033" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\057\031\121\033\054\001\001\000\002" +
    "\001\001\000\010\025\057\031\117\033\054\001\001\000" +
    "\010\025\057\031\115\033\054\001\001\000\004\030\116" +
    "\001\001\000\002\001\001\000\004\030\120\001\001\000" +
    "\002\001\001\000\004\030\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\025\057\027" +
    "\126\031\051\033\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\011\134\013\030\014\023\015\044\016\041" +
    "\017\024\020\025\021\034\023\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\025\057" +
    "\027\140\031\051\033\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\025\057\027\144" +
    "\031\051\033\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\011\147\013\030\014\023\015\044\016\041" +
    "\017\024\020\025\021\034\023\040\001\001\000\002\001" +
    "\001\000\004\026\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\011\154\013\030\014\023\015\044\016" +
    "\041\017\024\020\025\021\034\023\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\025\057\027\162\031\051" +
    "\033\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\011\165\013\030\014\023\015\044\016\041\017\024" +
    "\020\025\021\034\023\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\025\171\034\175" +
    "\036\176\040\174\001\001\000\002\001\001\000\012\025" +
    "\171\034\223\036\176\040\174\001\001\000\012\025\171" +
    "\034\221\036\176\040\174\001\001\000\004\037\212\001" +
    "\001\000\002\001\001\000\004\035\201\001\001\000\010" +
    "\025\171\036\204\040\174\001\001\000\010\025\171\036" +
    "\202\040\174\001\001\000\002\001\001\000\004\035\203" +
    "\001\001\000\002\001\001\000\004\035\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\171\040\217" +
    "\001\001\000\006\025\171\040\215\001\001\000\006\025" +
    "\171\040\213\001\001\000\002\001\001\000\004\037\214" +
    "\001\001\000\002\001\001\000\004\037\216\001\001\000" +
    "\002\001\001\000\004\037\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\230\001\001" +
    "\000\006\007\231\012\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\011\234\013\030" +
    "\014\023\015\044\016\041\017\024\020\025\021\034\023" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\240\012\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\011\243\013\030\014\023" +
    "\015\044\016\041\017\024\020\025\021\034\023\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private HashMap<String, Integer>tsymbolsI = new HashMap<>();
    private HashMap<String, Boolean>tsymbolsB = new HashMap<>();

    public int getSymbolValueInteger(String id){
        return (int)tsymbolsI.get(id);
    }
    public boolean getSymbolValueBoolean(String id){
        return (boolean)tsymbolsB.get(id);
    }
    
    public boolean estaInteger(String id){
        return tsymbolsI.containsKey(id);
    }
    public boolean estaBoolean(String id){
        return tsymbolsB.containsKey(id);
    }

    public void addSymbol(String id, int value){
        if(tsymbolsI.get(id) == null){
            tsymbolsI.put(id,value);
        } else{
            tsymbolsI.replace(id,value);
        }
    }
    public void addSymbol(String id, boolean value){
        if(tsymbolsB.get(id) == null){
            tsymbolsB.put(id,value);
        } else{
            tsymbolsB.replace(id,value);
        }
    }
    
    public void printVars(PrintStream out) {
        if (tsymbolsI.size() == 0) {
            out.println("No hi ha variables enteras declarades");
        } else {
            String fmt = "%-8s: %d";
            tsymbolsI.forEach((k,v) -> out.println(String.format(fmt,k,v)));
        }
        if (tsymbolsB.size() == 0) {
            out.println("No hi ha variables booleanas declarades");
        } else {
            String fmt = "%-8s: %b";
            tsymbolsB.forEach((k,v) -> out.println(String.format(fmt,k,v)));
        }
    }

    /**
    * Nos permite saber si se ha detectado un error:
    *   -true: Se ha detectado error
    *   -false: No se ha detectado error
    * En caso de true el funcionamiento será limitado hasta finalizar de procesar
    * la entrada, caso donde lo vuelve a poner a false.
    **/
    private boolean errorSemantic = false;
    
    /*
        -------------------GESTION DE ERRORES---------------------------
    */

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception{
        report_error("Error sintactico irrecuperable", cur_token);
        done_parsing();
    }

    @Override
    public void syntax_error(Symbol cur_token){
        report_error("de sintaxis", cur_token);
    }
    
    @Override
    public void report_error(String message, Object info){
        StringBuilder msg = new StringBuilder("ERROR:");
        if(info instanceof Symbol){
            ComplexSymbol token = (ComplexSymbol) info;
            Location l = token.getLeft();

            if(l != null){
                msg.append(" (fila: " + l.getLine() + ", columna: " + l.getColumn() + ")");
            }
        }
        msg.append(": " + message);
        
        System.err.println(msg);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception{
        report_error("Error irrecuperable (" + message + ")", info);
        done_parsing();
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Bloque EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Bloque ::= BloqueP Bloque 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Bloque ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BloqueP ::= Procedimiento 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueP",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BloqueP ::= Funcion 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueP",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BloqueP ::= Main 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueP",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Procedimiento ::= PROC IDENTIFICADOR LPARENTESIS Atributos RPARENTESIS LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Procedimiento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Funcion ::= FUNT IDENTIFICADOR LPARENTESIS Atributos RPARENTESIS LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Atributos ::= Datos IDENTIFICADOR AtributosP 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atributos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // AtributosP ::= COMA Atributos 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AtributosP",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AtributosP ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AtributosP",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Main ::= MAIN LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instrucciones ::= Asignaciones Instrucciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instrucciones ::= Condicionales Instrucciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instrucciones ::= Bucles Instrucciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Instrucciones ::= Returns Instrucciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Instrucciones ::= BREAK Instrucciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Instrucciones ::= Prints Instrucciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Instrucciones ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Asignaciones ::= INT IDENTIFICADOR ASIGNACION OperacionesAritmeticas PUNTOCOMA 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOperacionesAritmeticas v2 = (SymbolOperacionesAritmeticas)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                if((!estaBoolean(v1))&&(!estaInteger(v1))){
                        addSymbol(v1,(int)v2.value); 
                        RESULT = new SymbolAsignaciones((int)v2.value);
                    }else{
                        System.out.println("El identificador "+v1+" ya se ha definido con anterioridad");
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignaciones",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Asignaciones ::= BOOL IDENTIFICADOR ASIGNACION Expresiones PUNTOCOMA 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpresiones v2 = (SymbolExpresiones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                if((!estaBoolean(v1))&&(!estaInteger(v1))){
                        addSymbol(v1,(boolean)v2.value); 
                        RESULT = new SymbolAsignaciones((boolean)v2.value);
                    }else{
                        System.out.println("El identificador "+v1+" ya se ha definido con anterioridad");
                }  
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignaciones",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Constantes ::= CONST 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constantes",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Constantes ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constantes",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Condicionales ::= IF LPARENTESIS Expresiones RPARENTESIS LLLAVE Instrucciones RLLAVE Else 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condicionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Else ::= ELSE LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Else ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Bucles ::= While 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bucles",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Bucles ::= Do 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bucles",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Bucles ::= For 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bucles",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // While ::= WHILE LPARENTESIS Expresiones RPARENTESIS LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("While",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Do ::= DO LLLAVE Instrucciones RLLAVE WHILE LPARENTESIS Expresiones RPARENTESIS PUNTOCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Do",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // For ::= FOR LPARENTESIS Asignaciones PUNTOCOMA Expresiones PUNTOCOMA Incremento RPARENTESIS LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("For",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Returns ::= RETURN ID PUNTOCOMA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolID v = (SymbolID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                //RESULT = new SymbolReturns(v.value);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Returns",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Prints ::= PRINT 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prints",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Prints ::= PRINTLN 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prints",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Enters ::= ENTER 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Enters",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Enters ::= ENTERLN 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Enters",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Datos ::= INT 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Datos",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Datos ::= BOOL 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Datos",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ID ::= IDENTIFICADOR 
            {
              SymbolID RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(estaInteger(v)){
                    int valor = getSymbolValueInteger(v);
                    RESULT = new SymbolID(valor);
                }else if (estaBoolean(v)){
                    boolean valor = getSymbolValueBoolean(v);
                    RESULT = new SymbolID(valor);
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ID ::= valor 
            {
              SymbolID RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolID(v);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expresiones ::= ExpresionesC ExpresionesP 
            {
              SymbolExpresiones RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpresionesC v1 = (SymbolExpresionesC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresionesP v2 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresiones((boolean)v1.value,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ExpresionesP ::= AND ExpresionesC ExpresionesP 
            {
              SymbolExpresionesP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpresionesC v1 = (SymbolExpresionesC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresionesP v2 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresionesP((boolean)v1.value, ParserSym.AND,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesP",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ExpresionesP ::= OR ExpresionesC ExpresionesP 
            {
              SymbolExpresionesP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpresionesC v1 = (SymbolExpresionesC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresionesP v2 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresionesP((boolean)v1.value, ParserSym.OR,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesP",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ExpresionesP ::= XOR ExpresionesC ExpresionesP 
            {
              SymbolExpresionesP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpresionesC v1 = (SymbolExpresionesC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresionesP v2 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresionesP((boolean)v1.value, ParserSym.XOR,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesP",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ExpresionesP ::= 
            {
              SymbolExpresionesP RESULT =null;
		
                RESULT = new SymbolExpresionesP();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesP",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ExpresionesC ::= Exp ExpresionesCP 
            {
              SymbolExpresionesC RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExp v1 = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresionesCP v2 = (SymbolExpresionesCP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresionesC(v1,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesC",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ExpresionesCP ::= EQUIVALENTE Exp 
            {
              SymbolExpresionesCP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExp v = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v.value instanceof Boolean){
                    RESULT = new SymbolExpresionesCP((boolean)v.value, ParserSym.EQUIVALENTE);
                }else{
                    RESULT = new SymbolExpresionesCP((int)v.value, ParserSym.EQUIVALENTE);
                }      
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesCP",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ExpresionesCP ::= NOEQUIVALENTE Exp 
            {
              SymbolExpresionesCP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExp v = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v.value instanceof Boolean){
                    RESULT = new SymbolExpresionesCP((boolean)v.value, ParserSym.NOEQUIVALENTE);
                }else{
                    RESULT = new SymbolExpresionesCP((int)v.value, ParserSym.NOEQUIVALENTE);
                }   
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesCP",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExpresionesCP ::= MAYORIGUAL Exp 
            {
              SymbolExpresionesCP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExp v = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v.value instanceof Boolean){
                    System.out.println("Se está intentando pasar un valor booleano cuando se requiere un entero");
                    RESULT = new SymbolExpresionesCP();
                }else{
                    RESULT = new SymbolExpresionesCP((int)v.value, ParserSym.MAYORIGUAL);
                }   
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesCP",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExpresionesCP ::= MAYOR Exp 
            {
              SymbolExpresionesCP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExp v = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v.value instanceof Boolean){
                    System.out.println("Se está intentando pasar un valor booleano cuando se requiere un entero");
                    RESULT = new SymbolExpresionesCP();
                }else{
                    RESULT = new SymbolExpresionesCP((int)v.value, ParserSym.MAYOR);
                } 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesCP",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ExpresionesCP ::= MENORIGUAL Exp 
            {
              SymbolExpresionesCP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExp v = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v.value instanceof Boolean){
                    System.out.println("Se está intentando pasar un valor booleano cuando se requiere un entero");
                    RESULT = new SymbolExpresionesCP();
                }else{
                    RESULT = new SymbolExpresionesCP((int)v.value, ParserSym.MENORIGUAL);
                } 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesCP",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpresionesCP ::= MENOR Exp 
            {
              SymbolExpresionesCP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExp v = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v.value instanceof Boolean){
                    System.out.println("Se está intentando pasar un valor booleano cuando se requiere un entero");
                    RESULT = new SymbolExpresionesCP();
                }else{
                    RESULT = new SymbolExpresionesCP((int)v.value, ParserSym.MENOR);
                } 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesCP",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpresionesCP ::= 
            {
              SymbolExpresionesCP RESULT =null;
		
                RESULT = new SymbolExpresionesCP();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesCP",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OperacionesAritmeticas ::= MultiplicacionDivision OperacionesAritmeticasP 
            {
              SymbolOperacionesAritmeticas RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolMultiplicacionDivision v1 = (SymbolMultiplicacionDivision)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperacionesAritmeticasP v2 = (SymbolOperacionesAritmeticasP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolOperacionesAritmeticas((int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticas",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OperacionesAritmeticasP ::= SUMA MultiplicacionDivision OperacionesAritmeticasP 
            {
              SymbolOperacionesAritmeticasP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolMultiplicacionDivision v1 = (SymbolMultiplicacionDivision)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperacionesAritmeticasP v2 = (SymbolOperacionesAritmeticasP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolOperacionesAritmeticasP(ParserSym.SUMA,(int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticasP",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OperacionesAritmeticasP ::= RESTA MultiplicacionDivision OperacionesAritmeticasP 
            {
              SymbolOperacionesAritmeticasP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolMultiplicacionDivision v1 = (SymbolMultiplicacionDivision)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperacionesAritmeticasP v2 = (SymbolOperacionesAritmeticasP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolOperacionesAritmeticasP(ParserSym.RESTA,(int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticasP",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OperacionesAritmeticasP ::= 
            {
              SymbolOperacionesAritmeticasP RESULT =null;
		
                RESULT = new SymbolOperacionesAritmeticasP();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticasP",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MultiplicacionDivision ::= FinalOperaciones MultiplicacionDivisionP 
            {
              SymbolMultiplicacionDivision RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFinalOperaciones v1 = (SymbolFinalOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMultiplicacionDivisionP v2 = (SymbolMultiplicacionDivisionP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolMultiplicacionDivision((int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicacionDivision",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MultiplicacionDivisionP ::= MULTIPLICACION FinalOperaciones MultiplicacionDivisionP 
            {
              SymbolMultiplicacionDivisionP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFinalOperaciones v1 = (SymbolFinalOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMultiplicacionDivisionP v2 = (SymbolMultiplicacionDivisionP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolMultiplicacionDivisionP(ParserSym.MULTIPLICACION,(int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicacionDivisionP",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MultiplicacionDivisionP ::= DIVISION FinalOperaciones MultiplicacionDivisionP 
            {
              SymbolMultiplicacionDivisionP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFinalOperaciones v1 = (SymbolFinalOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMultiplicacionDivisionP v2 = (SymbolMultiplicacionDivisionP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolMultiplicacionDivisionP(ParserSym.DIVISION,(int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicacionDivisionP",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MultiplicacionDivisionP ::= MODULO FinalOperaciones MultiplicacionDivisionP 
            {
              SymbolMultiplicacionDivisionP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFinalOperaciones v1 = (SymbolFinalOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMultiplicacionDivisionP v2 = (SymbolMultiplicacionDivisionP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolMultiplicacionDivisionP(ParserSym.MODULO,(int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicacionDivisionP",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MultiplicacionDivisionP ::= 
            {
              SymbolMultiplicacionDivisionP RESULT =null;
		
                RESULT = new SymbolMultiplicacionDivisionP();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicacionDivisionP",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Exp ::= LPARENTESIS Expresiones RPARENTESIS 
            {
              SymbolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpresiones v = (SymbolExpresiones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new SymbolExp((boolean)v.value);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp ::= ID 
            {
              SymbolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolID v = (SymbolID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v.value instanceof Integer){
                    RESULT = new SymbolExp((int)v.value);
                }else{
                    RESULT = new SymbolExp((boolean)v.value);
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp ::= NOT Exp 
            {
              SymbolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExp v = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v.value instanceof Boolean){
                    RESULT = new SymbolExp(!(boolean)v.value);
                }else{
                    System.out.println("Se está pasando por parametro un entero cuando debería ser booleano");
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp ::= TRUE 
            {
              SymbolExp RESULT =null;
		
                RESULT = new SymbolExp(true);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp ::= FALSE 
            {
              SymbolExp RESULT =null;
		
                RESULT = new SymbolExp(false);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FinalOperaciones ::= LPARENTESIS OperacionesAritmeticas RPARENTESIS 
            {
              SymbolFinalOperaciones RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOperacionesAritmeticas v = (SymbolOperacionesAritmeticas)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new SymbolFinalOperaciones((int)v.value);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FinalOperaciones",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FinalOperaciones ::= ID 
            {
              SymbolFinalOperaciones RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolID v = (SymbolID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v.value instanceof Integer){
                    RESULT = new SymbolFinalOperaciones((int)v.value);
                }else{
                    System.out.println("Se está pasando por parametro un Booleano cuando debería ser Integer");
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FinalOperaciones",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FinalOperaciones ::= RESTA OperacionesAritmeticas 
            {
              SymbolFinalOperaciones RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperacionesAritmeticas v = (SymbolOperacionesAritmeticas)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolFinalOperaciones(-1 * (int)v.value);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FinalOperaciones",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
