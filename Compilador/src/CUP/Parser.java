
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package CUP;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import TablaSimbolos.*;
import CodigoTresDirecciones.*;
import CUP.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\012\000\002\005\013\000\002\007\005\000" +
    "\002\010\004\000\002\010\002\000\002\006\006\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\002" +
    "\000\002\024\007\000\002\024\006\000\002\024\003\000" +
    "\002\025\020\000\002\025\012\000\002\012\003\000\002" +
    "\012\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\013\012\000\002\014\003\000\002\014\003" +
    "\000\002\027\006\000\002\027\002\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\016\011\000\002" +
    "\017\013\000\002\020\015\000\002\021\005\000\002\021" +
    "\002\000\002\022\003\000\002\022\003\000\002\023\003" +
    "\000\002\023\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\004\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\012\002\uffff\042\007\046\011\047\006\001" +
    "\002\000\012\002\uffff\042\007\046\011\047\006\001\002" +
    "\000\012\002\ufffd\042\ufffd\046\ufffd\047\ufffd\001\002\000" +
    "\004\004\240\001\002\000\004\027\235\001\002\000\004" +
    "\002\234\001\002\000\004\004\014\001\002\000\012\002" +
    "\ufffc\042\ufffc\046\ufffc\047\ufffc\001\002\000\012\002\ufffe" +
    "\042\ufffe\046\ufffe\047\ufffe\001\002\000\004\025\015\001" +
    "\002\000\006\043\021\044\017\001\002\000\004\004\230" +
    "\001\002\000\010\004\uffe8\016\uffe8\033\uffe8\001\002\000" +
    "\004\026\022\001\002\000\010\004\uffe9\016\uffe9\033\uffe9" +
    "\001\002\000\004\027\023\001\002\000\036\004\042\030" +
    "\uffef\034\031\036\026\037\033\040\045\043\021\044\017" +
    "\045\051\050\036\051\040\052\035\053\032\054\037\001" +
    "\002\000\040\004\042\030\uffef\034\031\036\026\037\033" +
    "\040\045\041\uffef\043\021\044\017\045\051\050\036\051" +
    "\040\052\035\053\032\054\037\001\002\000\040\004\uffdd" +
    "\030\uffdd\034\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\043" +
    "\uffdd\044\uffdd\045\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd" +
    "\054\uffdd\001\002\000\004\025\221\001\002\000\040\004" +
    "\042\030\uffef\034\031\036\026\037\033\040\045\041\uffef" +
    "\043\021\044\017\045\051\050\036\051\040\052\035\053" +
    "\032\054\037\001\002\000\040\004\042\030\uffef\034\031" +
    "\036\026\037\033\040\045\041\uffef\043\021\044\017\045" +
    "\051\050\036\051\040\052\035\053\032\054\037\001\002" +
    "\000\004\025\204\001\002\000\040\004\uffd5\030\uffd5\034" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\001" +
    "\002\000\004\027\174\001\002\000\040\004\042\030\uffef" +
    "\034\031\036\026\037\033\040\045\041\uffef\043\021\044" +
    "\017\045\051\050\036\051\040\052\035\053\032\054\037" +
    "\001\002\000\040\004\uffd6\030\uffd6\034\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\043\uffd6\044\uffd6\045\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\053\uffd6\054\uffd6\001\002\000\040\004" +
    "\042\030\uffef\034\031\036\026\037\033\040\045\041\uffef" +
    "\043\021\044\017\045\051\050\036\051\040\052\035\053" +
    "\032\054\037\001\002\000\040\004\uffd4\030\uffd4\034\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\041\uffd4\043\uffd4\044\uffd4\045" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\001\002" +
    "\000\040\004\uffd7\030\uffd7\034\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\041\uffd7\043\uffd7\044\uffd7\045\uffd7\050\uffd7\051\uffd7" +
    "\052\uffd7\053\uffd7\054\uffd7\001\002\000\040\004\042\030" +
    "\uffef\034\031\036\026\037\033\040\045\041\uffef\043\021" +
    "\044\017\045\051\050\036\051\040\052\035\053\032\054" +
    "\037\001\002\000\004\031\160\001\002\000\040\004\uffde" +
    "\030\uffde\034\uffde\036\uffde\037\uffde\040\uffde\041\uffde\043" +
    "\uffde\044\uffde\045\uffde\050\uffde\051\uffde\052\uffde\053\uffde" +
    "\054\uffde\001\002\000\004\030\157\001\002\000\004\025" +
    "\142\001\002\000\040\004\uffdf\030\uffdf\034\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\043\uffdf\044\uffdf\045\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\001\002\000\042" +
    "\004\uffec\030\uffec\032\uffec\034\uffec\036\uffec\037\uffec\040" +
    "\uffec\041\uffec\043\uffec\044\uffec\045\uffec\050\uffec\051\uffec" +
    "\052\uffec\053\uffec\054\uffec\001\002\000\004\004\136\001" +
    "\002\000\004\017\052\001\002\000\006\043\021\044\017" +
    "\001\002\000\004\033\054\001\002\000\006\043\021\044" +
    "\017\001\002\000\004\016\056\001\002\000\004\004\057" +
    "\001\002\000\004\031\060\001\002\000\004\025\061\001" +
    "\002\000\016\004\073\005\063\007\071\024\070\055\064" +
    "\056\066\001\002\000\040\006\102\007\111\010\104\011" +
    "\110\012\107\013\103\014\076\015\105\016\106\017\101" +
    "\020\100\021\075\022\112\023\077\033\132\001\002\000" +
    "\044\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\026\uffd2\032\uffd2\033\uffd2\001\002\000\044" +
    "\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\026\uffd1\032\uffd1\033\uffd1\001\002\000\044\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\026\uffe7\032\uffe7\033\uffe7\001\002\000\044\006\uffd0" +
    "\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\026\uffd0\032\uffd0\033\uffd0\001\002\000\044\006\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\026" +
    "\uffe5\032\uffe5\033\uffe5\001\002\000\016\004\073\005\063" +
    "\007\071\024\070\055\064\056\066\001\002\000\016\004" +
    "\073\005\063\007\071\024\070\055\064\056\066\001\002" +
    "\000\044\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\026\uffe6\032\uffe6\033\uffe6\001\002\000" +
    "\044\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\026\uffd3\032\uffd3\033\uffd3\001\002\000\044" +
    "\006\uffc0\007\uffc0\010\104\011\110\012\107\013\103\014" +
    "\076\015\105\016\106\017\101\020\100\021\075\022\112" +
    "\023\077\026\uffc0\032\uffc0\033\uffc0\001\002\000\016\004" +
    "\073\005\063\007\071\024\070\055\064\056\066\001\002" +
    "\000\016\004\073\005\063\007\071\024\070\055\064\056" +
    "\066\001\002\000\016\004\073\005\063\007\071\024\070" +
    "\055\064\056\066\001\002\000\016\004\073\005\063\007" +
    "\071\024\070\055\064\056\066\001\002\000\016\004\073" +
    "\005\063\007\071\024\070\055\064\056\066\001\002\000" +
    "\016\004\073\005\063\007\071\024\070\055\064\056\066" +
    "\001\002\000\016\004\073\005\063\007\071\024\070\055" +
    "\064\056\066\001\002\000\016\004\073\005\063\007\071" +
    "\024\070\055\064\056\066\001\002\000\016\004\073\005" +
    "\063\007\071\024\070\055\064\056\066\001\002\000\016" +
    "\004\073\005\063\007\071\024\070\055\064\056\066\001" +
    "\002\000\016\004\073\005\063\007\071\024\070\055\064" +
    "\056\066\001\002\000\016\004\073\005\063\007\071\024" +
    "\070\055\064\056\066\001\002\000\016\004\073\005\063" +
    "\007\071\024\070\055\064\056\066\001\002\000\016\004" +
    "\073\005\063\007\071\024\070\055\064\056\066\001\002" +
    "\000\044\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013" +
    "\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce" +
    "\022\uffce\023\uffce\026\uffce\032\uffce\033\uffce\001\002\000" +
    "\044\006\uffc4\007\uffc4\010\104\011\110\012\107\013\103" +
    "\014\076\015\105\016\106\017\101\020\100\021\075\022" +
    "\112\023\077\026\uffc4\032\uffc4\033\uffc4\001\002\000\044" +
    "\006\uffc2\007\uffc2\010\104\011\110\012\107\013\103\014" +
    "\076\015\105\016\106\017\101\020\100\021\075\022\112" +
    "\023\077\026\uffc2\032\uffc2\033\uffc2\001\002\000\044\006" +
    "\uffc1\007\uffc1\010\104\011\110\012\107\013\103\014\076" +
    "\015\105\016\106\017\101\020\100\021\075\022\112\023" +
    "\077\026\uffc1\032\uffc1\033\uffc1\001\002\000\044\006\uffc9" +
    "\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\026\uffc9\032\uffc9\033\uffc9\001\002\000\044\006\uffca\007" +
    "\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca" +
    "\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\026" +
    "\uffca\032\uffca\033\uffca\001\002\000\044\006\uffc3\007\uffc3" +
    "\010\104\011\110\012\107\013\103\014\076\015\105\016" +
    "\106\017\101\020\100\021\075\022\112\023\077\026\uffc3" +
    "\032\uffc3\033\uffc3\001\002\000\044\006\uffcc\007\uffcc\010" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\026\uffcc\032" +
    "\uffcc\033\uffcc\001\002\000\044\006\uffc5\007\uffc5\010\104" +
    "\011\110\012\107\013\103\014\076\015\105\016\106\017" +
    "\101\020\100\021\075\022\112\023\077\026\uffc5\032\uffc5" +
    "\033\uffc5\001\002\000\044\006\uffc7\007\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\026\uffc7\032\uffc7\033" +
    "\uffc7\001\002\000\044\006\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\026\uffcb\032\uffcb\033\uffcb" +
    "\001\002\000\044\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012" +
    "\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\026\uffcd\032\uffcd\033\uffcd\001" +
    "\002\000\044\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\026\uffc8\032\uffc8\033\uffc8\001\002" +
    "\000\044\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\026\uffcf\032\uffcf\033\uffcf\001\002\000" +
    "\044\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\026\uffc6\032\uffc6\033\uffc6\001\002\000\016" +
    "\004\073\005\063\007\071\024\070\055\064\056\066\001" +
    "\002\000\040\006\102\007\111\010\104\011\110\012\107" +
    "\013\103\014\076\015\105\016\106\017\101\020\100\021" +
    "\075\022\112\023\077\026\134\001\002\000\004\032\135" +
    "\001\002\000\042\004\uffeb\030\uffeb\032\uffeb\034\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\041\uffeb\043\uffeb\044\uffeb\045\uffeb" +
    "\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\001\002\000" +
    "\004\031\137\001\002\000\016\004\073\005\063\007\071" +
    "\024\070\055\064\056\066\001\002\000\040\006\102\007" +
    "\111\010\104\011\110\012\107\013\103\014\076\015\105" +
    "\016\106\017\101\020\100\021\075\022\112\023\077\032" +
    "\141\001\002\000\042\004\uffee\030\uffee\032\uffee\034\uffee" +
    "\036\uffee\037\uffee\040\uffee\041\uffee\043\uffee\044\uffee\045" +
    "\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\001\002" +
    "\000\012\004\042\043\021\044\017\045\051\001\002\000" +
    "\004\032\144\001\002\000\016\004\073\005\063\007\071" +
    "\024\070\055\064\056\066\001\002\000\036\006\102\007" +
    "\111\010\104\011\110\012\107\013\103\014\076\015\105" +
    "\016\106\017\101\020\100\021\075\022\112\023\077\001" +
    "\002\000\004\032\151\001\002\000\042\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\026\uffe2" +
    "\032\uffe2\001\002\000\042\006\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\026\uffe3\032\uffe3\001" +
    "\002\000\002\001\002\000\004\026\153\001\002\000\004" +
    "\027\154\001\002\000\036\004\042\030\uffef\034\031\036" +
    "\026\037\033\040\045\043\021\044\017\045\051\050\036" +
    "\051\040\052\035\053\032\054\037\001\002\000\004\030" +
    "\156\001\002\000\040\004\uffda\030\uffda\034\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\043\uffda\044\uffda\045\uffda\050" +
    "\uffda\051\uffda\052\uffda\053\uffda\054\uffda\001\002\000\012" +
    "\002\ufffb\042\ufffb\046\ufffb\047\ufffb\001\002\000\020\004" +
    "\073\005\063\007\071\024\070\025\162\055\064\056\066" +
    "\001\002\000\040\006\102\007\111\010\104\011\110\012" +
    "\107\013\103\014\076\015\105\016\106\017\101\020\100" +
    "\021\075\022\112\023\077\032\170\001\002\000\016\004" +
    "\073\005\063\007\071\024\070\055\064\056\066\001\002" +
    "\000\040\006\102\007\111\010\104\011\110\012\107\013" +
    "\103\014\076\015\105\016\106\017\101\020\100\021\075" +
    "\022\112\023\077\033\164\001\002\000\016\004\073\005" +
    "\063\007\071\024\070\055\064\056\066\001\002\000\040" +
    "\006\102\007\111\010\104\011\110\012\107\013\103\014" +
    "\076\015\105\016\106\017\101\020\100\021\075\022\112" +
    "\023\077\026\166\001\002\000\004\032\167\001\002\000" +
    "\042\004\uffea\030\uffea\032\uffea\034\uffea\036\uffea\037\uffea" +
    "\040\uffea\041\uffea\043\uffea\044\uffea\045\uffea\050\uffea\051" +
    "\uffea\052\uffea\053\uffea\054\uffea\001\002\000\042\004\uffed" +
    "\030\uffed\032\uffed\034\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\043\uffed\044\uffed\045\uffed\050\uffed\051\uffed\052\uffed" +
    "\053\uffed\054\uffed\001\002\000\006\030\ufff5\041\ufff5\001" +
    "\002\000\006\030\ufff2\041\ufff2\001\002\000\006\030\ufff1" +
    "\041\ufff1\001\002\000\036\004\042\030\uffef\034\031\036" +
    "\026\037\033\040\045\043\021\044\017\045\051\050\036" +
    "\051\040\052\035\053\032\054\037\001\002\000\004\030" +
    "\176\001\002\000\004\036\177\001\002\000\004\025\200" +
    "\001\002\000\016\004\073\005\063\007\071\024\070\055" +
    "\064\056\066\001\002\000\004\026\202\001\002\000\004" +
    "\032\203\001\002\000\040\004\uffdb\030\uffdb\034\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\043\uffdb\044\uffdb\045\uffdb" +
    "\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\001\002\000" +
    "\016\004\073\005\063\007\071\024\070\055\064\056\066" +
    "\001\002\000\004\026\206\001\002\000\004\027\207\001" +
    "\002\000\036\004\042\030\uffef\034\031\036\026\037\033" +
    "\040\045\043\021\044\017\045\051\050\036\051\040\052" +
    "\035\053\032\054\037\001\002\000\004\030\211\001\002" +
    "\000\042\004\uffe0\030\uffe0\034\uffe0\035\212\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\043\uffe0\044\uffe0\045\uffe0\050\uffe0" +
    "\051\uffe0\052\uffe0\053\uffe0\054\uffe0\001\002\000\004\027" +
    "\214\001\002\000\040\004\uffe4\030\uffe4\034\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\043\uffe4\044\uffe4\045\uffe4\050" +
    "\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\001\002\000\036" +
    "\004\042\030\uffef\034\031\036\026\037\033\040\045\043" +
    "\021\044\017\045\051\050\036\051\040\052\035\053\032" +
    "\054\037\001\002\000\004\030\216\001\002\000\040\004" +
    "\uffe1\030\uffe1\034\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\043\uffe1\044\uffe1\045\uffe1\050\uffe1\051\uffe1\052\uffe1\053" +
    "\uffe1\054\uffe1\001\002\000\006\030\ufff4\041\ufff4\001\002" +
    "\000\006\030\ufff0\041\ufff0\001\002\000\016\004\073\005" +
    "\063\007\071\024\070\055\064\056\066\001\002\000\004" +
    "\026\223\001\002\000\004\027\224\001\002\000\036\004" +
    "\042\030\uffef\034\031\036\026\037\033\040\045\043\021" +
    "\044\017\045\051\050\036\051\040\052\035\053\032\054" +
    "\037\001\002\000\004\030\226\001\002\000\040\004\uffdc" +
    "\030\uffdc\034\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc" +
    "\054\uffdc\001\002\000\006\030\ufff3\041\ufff3\001\002\000" +
    "\006\026\ufff7\033\231\001\002\000\006\043\021\044\017" +
    "\001\002\000\004\026\ufff9\001\002\000\004\026\ufff8\001" +
    "\002\000\004\002\001\001\002\000\036\004\042\030\uffef" +
    "\034\031\036\026\037\033\040\045\043\021\044\017\045" +
    "\051\050\036\051\040\052\035\053\032\054\037\001\002" +
    "\000\004\030\237\001\002\000\012\002\ufff6\042\ufff6\046" +
    "\ufff6\047\ufff6\001\002\000\004\025\241\001\002\000\006" +
    "\043\021\044\017\001\002\000\004\026\243\001\002\000" +
    "\004\027\244\001\002\000\040\004\042\030\uffef\034\031" +
    "\036\026\037\033\040\045\041\uffef\043\021\044\017\045" +
    "\051\050\036\051\040\052\035\053\032\054\037\001\002" +
    "\000\006\030\uffd8\041\247\001\002\000\004\030\252\001" +
    "\002\000\012\004\073\005\063\055\064\056\066\001\002" +
    "\000\004\032\251\001\002\000\004\030\uffd9\001\002\000" +
    "\012\002\ufffa\042\ufffa\046\ufffa\047\ufffa\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\014\002\007\003\003\004\012\005\004\006" +
    "\011\001\001\000\014\002\252\003\003\004\012\005\004" +
    "\006\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\017\012\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\011\043\012\047\013\027\015\023\016\045\017\042" +
    "\020\024\022\033\023\026\024\040\025\046\001\001\000" +
    "\030\011\226\012\047\013\027\015\023\016\045\017\042" +
    "\020\024\022\033\023\026\024\040\025\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\011\217\012\047" +
    "\013\027\015\023\016\045\017\042\020\024\022\033\023" +
    "\026\024\040\025\046\001\001\000\030\011\216\012\047" +
    "\013\027\015\023\016\045\017\042\020\024\022\033\023" +
    "\026\024\040\025\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\011\172\012\047\013" +
    "\027\015\023\016\045\017\042\020\024\022\033\023\026" +
    "\024\040\025\046\001\001\000\002\001\001\000\030\011" +
    "\171\012\047\013\027\015\023\016\045\017\042\020\024" +
    "\022\033\023\026\024\040\025\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\011\170\012\047\013\027" +
    "\015\023\016\045\017\042\020\024\022\033\023\026\024" +
    "\040\025\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\052\001\001\000\002\001\001\000\004\012\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\026\066\030\061\031\071\032" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\026\066\030\130\031\071\032\064\001\001" +
    "\000\012\026\066\030\073\031\071\032\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\026\066\030\127\031\071\032\064\001\001\000\012\026" +
    "\066\030\126\031\071\032\064\001\001\000\012\026\066" +
    "\030\125\031\071\032\064\001\001\000\012\026\066\030" +
    "\124\031\071\032\064\001\001\000\012\026\066\030\123" +
    "\031\071\032\064\001\001\000\012\026\066\030\122\031" +
    "\071\032\064\001\001\000\012\026\066\030\121\031\071" +
    "\032\064\001\001\000\012\026\066\030\120\031\071\032" +
    "\064\001\001\000\012\026\066\030\117\031\071\032\064" +
    "\001\001\000\012\026\066\030\116\031\071\032\064\001" +
    "\001\000\012\026\066\030\115\031\071\032\064\001\001" +
    "\000\012\026\066\030\114\031\071\032\064\001\001\000" +
    "\012\026\066\030\113\031\071\032\064\001\001\000\012" +
    "\026\066\030\112\031\071\032\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\026\066\030\132\031\071" +
    "\032\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\026\066\030\137" +
    "\031\071\032\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\047\024\142\025\046\001\001\000\002" +
    "\001\001\000\014\014\145\026\146\030\144\031\147\032" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\011\154\012\047" +
    "\013\027\015\023\016\045\017\042\020\024\022\033\023" +
    "\026\024\040\025\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\026\066\030\160\031" +
    "\071\032\064\001\001\000\002\001\001\000\012\026\066" +
    "\030\162\031\071\032\064\001\001\000\002\001\001\000" +
    "\012\026\066\030\164\031\071\032\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\011\174\012\047\013\027\015\023\016\045\017" +
    "\042\020\024\022\033\023\026\024\040\025\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\200\026\146\030\144\031\147\032\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\204\026\146\030\144\031\147\032\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\011\207\012" +
    "\047\013\027\015\023\016\045\017\042\020\024\022\033" +
    "\023\026\024\040\025\046\001\001\000\002\001\001\000" +
    "\004\027\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\011\214\012\047\013\027\015\023\016\045\017" +
    "\042\020\024\022\033\023\026\024\040\025\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\221\026\146\030\144\031\147" +
    "\032\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\011\224\012\047\013\027\015\023\016\045\017\042" +
    "\020\024\022\033\023\026\024\040\025\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\231\001\001\000\006\007\232\012\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\011\235\012\047\013\027\015\023\016\045\017\042\020" +
    "\024\022\033\023\026\024\040\025\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\241\012\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\011\244\012\047\013\027\015\023\016\045\017" +
    "\042\020\024\022\033\023\026\024\040\025\046\001\001" +
    "\000\004\021\245\001\001\000\002\001\001\000\004\026" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private TablaDeSimbolos ts = new TablaDeSimbolos();
    private Generador g = new Generador();
    private int erroresEncontrados = 0;

    public void printVarsSimbolos(PrintStream out){
        ts.printVars(out);
    }
    public void printVarsCodigo(PrintStream out){
        g.printVarsCodigo(out);
    }
    public void printVarsVariables(PrintStream out){
        g.printVarsVariables(out);
    }
    /**
    * Nos permite saber si se ha detectado un error:
    *   -true: Se ha detectado error
    *   -false: No se ha detectado error
    * En caso de true el funcionamiento será limitado hasta finalizar de procesar
    * la entrada, caso donde lo vuelve a poner a false.
    **/
    private boolean errorSemantic = false;
    
    /*
        -------------------GESTION DE ERRORES---------------------------
    */

    public void errorEncontrado(){
        errorSemantic= true;
        this.erroresEncontrados++;
    }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception{
        report_error("Error sintactico irrecuperable", cur_token);
        done_parsing();
    }

    @Override
    public void syntax_error(Symbol cur_token){
        report_error("de sintaxis", cur_token);
    }
    
    @Override
    public void report_error(String message, Object info){
        StringBuilder msg = new StringBuilder("ERROR:");
        if(info instanceof Symbol){
            ComplexSymbol token = (ComplexSymbol) info;
            Location l = token.getLeft();

            if(l != null){
                msg.append(" (fila: " + l.getLine() + ", columna: " + l.getColumn() + ")");
            }
        }
        msg.append(": " + message);
        
        System.err.println(msg);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception{
        report_error("Error irrecuperable (" + message + ")", info);
        done_parsing();
    }

    public int getErroresEncontrados(){
        return erroresEncontrados;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Bloque EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Bloque ::= BloqueP Bloque 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Bloque ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BloqueP ::= Procedimiento 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueP",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BloqueP ::= Funcion 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueP",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BloqueP ::= Main 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueP",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Procedimiento ::= PROC IDENTIFICADOR LPARENTESIS Atributos RPARENTESIS LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Procedimiento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Funcion ::= FUNT IDENTIFICADOR LPARENTESIS Atributos RPARENTESIS LLLAVE Instrucciones Return RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Atributos ::= Datos IDENTIFICADOR AtributosP 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atributos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // AtributosP ::= COMA Atributos 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AtributosP",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AtributosP ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AtributosP",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Main ::= MAIN LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
                ts.nuevoBloque(1,"",0);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instrucciones ::= Asignaciones Instrucciones 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instrucciones ::= Condicionales Instrucciones 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instrucciones ::= Bucles Instrucciones 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Instrucciones ::= BREAK Instrucciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Instrucciones ::= Prints Instrucciones 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Instrucciones ::= Enters Instrucciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Instrucciones ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Asignaciones ::= Datos IDENTIFICADOR ASIGNACION Operaciones PUNTOCOMA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoDato v2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                if(errorSemantic){
                    errorSemantic = false;
                }else{
                    switch(v){
                        case ParserSym.INT ->{
                            if (v2.esEntero()){
                                if((!ts.consultaEntero(v1))&&(!ts.consultaBoolean(v1))){
                                    ts.addVariable(v1,0); 
                                    g.generarCodigoAsignación(v2,v1,0);
                                }else{
                                    errorEncontrado();
                                    report_error("El identificador "+v1+" ya se ha definido con anterioridad",v1);
                                }
                            }else{
                                errorEncontrado();
                                report_error("Se está añadiendo un booleano a un entero",v2);
                            }
                        }
                        case ParserSym.BOOL ->{
                            if (v2.esBoolean()){
                                if((!ts.consultaEntero(v1))&&(!ts.consultaBoolean(v1))){
                                    ts.addVariable(v1,1);
                                    g.generarCodigoAsignación(v2,v1,1);
                                }else{
                                    errorEncontrado();
                                    report_error("El identificador "+v1+" ya se ha definido con anterioridad",v1);
                                }
                            }else{
                                errorEncontrado();
                                report_error("Se está añadiendo un entero a un booleano",v2);
                            }
                        }
                    }
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignaciones",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Asignaciones ::= IDENTIFICADOR ASIGNACION Operaciones PUNTOCOMA 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoDato v2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                if(errorSemantic){
                    errorSemantic = false;
                }else{
                    if (v2.esEntero()){
                        if((ts.consultaEntero(v1))&&(!ts.consultaBoolean(v1))){
                            ts.addVariable(v1,0); 
                            g.generarCodigoAsignación(v2,v1,0);
                        }else if(ts.consultaBoolean(v1)){
                            errorEncontrado();
                            report_error("El identificador "+v1+" es un boolano, estas añadiendo un entero",v2);
                        }else{
                            errorEncontrado();
                            report_error("El identificador "+v1+" ya se ha definido con anterioridad",v1);
                         }
                    }else{
                        if((!ts.consultaEntero(v1))&&(ts.consultaBoolean(v1))){
                            ts.addVariable(v1,1); 
                            g.generarCodigoAsignación(v2,v1,1);
                         }else if(ts.consultaEntero(v1)){
                            errorEncontrado();
                            report_error("El identificador "+v1+" es un entero, estas añadiendo un booleano",v2);
                         }else{
                            errorEncontrado();
                            report_error("El identificador "+v1+" ya se ha definido con anterioridad",v1);
                         }
                    }
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignaciones",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Asignaciones ::= Tupla 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignaciones",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tupla ::= PAIR MENOR Datos COMA Datos MAYOR IDENTIFICADOR ASIGNACION LPARENTESIS Operaciones COMA Operaciones RPARENTESIS PUNTOCOMA 
            {
              Object RESULT =null;
		
                //Comprobar formación y Unir con asignación
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tupla",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tupla ::= IDENTIFICADOR ASIGNACION LPARENTESIS Operaciones COMA Operaciones RPARENTESIS PUNTOCOMA 
            {
              Object RESULT =null;
		           
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tupla",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Datos ::= INT 
            {
              Integer RESULT =null;
		
                RESULT = ParserSym.INT;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Datos",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Datos ::= BOOL 
            {
              Integer RESULT =null;
		
                RESULT = ParserSym.BOOL;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Datos",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Operaciones ::= OperacionesAritmeticas 
            {
              TipoDato RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoDato v = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = v;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operaciones",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Operaciones ::= Expresiones 
            {
              TipoDato RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoDato v = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = v;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operaciones",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Operaciones ::= ID 
            {
              TipoDato RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoDato v = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = v;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operaciones",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Condicionales ::= IF LPARENTESIS ExpresionesCondicional RPARENTESIS LLLAVE Instrucciones RLLAVE Else 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                //Construye el código de 3 direcciones
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condicionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ExpresionesCondicional ::= Expresiones 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesCondicional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ExpresionesCondicional ::= ID 
            {
              Object RESULT =null;
		 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesCondicional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Else ::= ELSE LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
                //Construye el código de 3 direcciones
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Else ::= 
            {
              Object RESULT =null;
		
                //Construye el código de 3 direcciones
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Bucles ::= While 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bucles",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Bucles ::= Do 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bucles",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Bucles ::= For 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bucles",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // While ::= WHILE LPARENTESIS ExpresionesCondicional RPARENTESIS LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
               //Construye el código de 3 direcciones
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("While",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Do ::= DO LLLAVE Instrucciones RLLAVE WHILE LPARENTESIS ExpresionesCondicional RPARENTESIS PUNTOCOMA 
            {
              Object RESULT =null;
		
                //Construye el código de 3 direcciones
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Do",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // For ::= FOR LPARENTESIS Asignaciones PUNTOCOMA ExpresionesCondicional PUNTOCOMA Incremento RPARENTESIS LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
                //Construye el código de 3 direcciones
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("For",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Return ::= RETURN ID PUNTOCOMA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TipoDato v = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Return ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Prints ::= PRINT 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prints",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Prints ::= PRINTLN 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prints",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Enters ::= ENTER 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Enters",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Enters ::= ENTERLN 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Enters",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ID ::= IDENTIFICADOR 
            {
              TipoDato RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(!ts.consultaEntero(v) && !ts.consultaBoolean(v)){
                    errorEncontrado();
                    report_error("Identificador no definido \""+v+"\"", v);
                }else{
                    g.generarCodigoIdentificador(v);
                    RESULT = ts.getValor(v);
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ID ::= valor 
            {
              TipoDato RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new TipoDato(0,v,true);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ID ::= TRUE 
            {
              TipoDato RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new TipoDato(1,1,true);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ID ::= FALSE 
            {
              TipoDato RESULT =null;
		
                RESULT = new TipoDato(1,0,true);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresiones ::= Operaciones AND Operaciones 
            {
              TipoDato RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDato v1 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoDato v2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(!v1.esBoolean()){
                    errorEncontrado();
                    report_error("Se esperaba un booleano y se ha recibido: \""+v1+"\"", v1);
                }
                if(!v2.esBoolean()){
                    errorEncontrado();
                    report_error("Se esperaba un boolean y se ha recibido: \""+v2+"\"", v2);
                }
                RESULT=g.generarCodigoOperaciones("AND",v1,v2,false);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresiones ::= Operaciones OR Operaciones 
            {
              TipoDato RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDato v1 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoDato v2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(!v1.esBoolean()){
                    errorEncontrado();
                    report_error("Se esperaba un booleano y se ha recibido: \""+v1+"\"", v1);
                }
                if(!v2.esBoolean()){
                    errorEncontrado();
                    report_error("Se esperaba un boolean y se ha recibido: \""+v2+"\"", v2);
                }
                RESULT=g.generarCodigoOperaciones("OR",v1,v2,false);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresiones ::= Operaciones XOR Operaciones 
            {
              TipoDato RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDato v1 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoDato v2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(!v1.esBoolean()){
                    errorEncontrado();
                    report_error("Se esperaba un booleano y se ha recibido: \""+v1+"\"", v1);
                }
                if(!v2.esBoolean()){
                    errorEncontrado();
                    report_error("Se esperaba un boolean y se ha recibido: \""+v2+"\"", v2);
                }
                RESULT=g.generarCodigoOperaciones("XOR",v1,v2,false);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresiones ::= Operaciones EQUIVALENTE Operaciones 
            {
              TipoDato RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDato v1 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoDato v2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v1.esBoolean()){
                    if(!v2.esBoolean()){
                        errorEncontrado();
                        report_error("Se esperaba un boolean y se ha recibido: \""+v2+"\"", v2);
                    }else{
                        RESULT=g.generarCodigoOperaciones("EQ",v1,v2,false);
                    }
                }else if(v1.esEntero()){
                    if(!v2.esEntero()){
                        errorEncontrado();
                        report_error("Se esperaba un entero y se ha recibido: \""+v2+"\"", v2);
                    }else{
                        RESULT=g.generarCodigoOperaciones("EQ",v1,v2,false);
                    }
                }else{
                    if(!v2.esNull()){
                        errorEncontrado();
                        report_error("Se esperaba un null y se ha recibido: \""+v2+"\"", v2);
                    }else{
                        RESULT=g.generarCodigoOperaciones("EQ",v1,v2,false);
                    }
                }        
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresiones ::= Operaciones NOEQUIVALENTE Operaciones 
            {
              TipoDato RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDato v1 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoDato v2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v1.esBoolean()){
                    if(!v2.esBoolean()){
                        errorEncontrado();
                        report_error("Se esperaba un boolean y se ha recibido: \""+v2+"\"", v2);
                    }else{
                        RESULT=g.generarCodigoOperaciones("NE",v1,v2,false);
                    }
                }else if(v1.esEntero()){
                    if(!v2.esEntero()){
                        errorEncontrado();
                        report_error("Se esperaba un entero y se ha recibido: \""+v2+"\"", v2);
                    }else{
                        RESULT=g.generarCodigoOperaciones("NE",v1,v2,false);
                    }
                }else{
                    if(!v2.esNull()){
                        errorEncontrado();
                        report_error("Se esperaba un null y se ha recibido: \""+v2+"\"", v2);
                    }else{
                        RESULT=g.generarCodigoOperaciones("NE",v1,v2,false);
                    }
                } 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresiones ::= Operaciones MAYORIGUAL Operaciones 
            {
              TipoDato RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDato v1 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoDato v2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v1.esBoolean()){
                    if(!v2.esBoolean()){
                        errorEncontrado();
                        report_error("Se esperaba un boolean y se ha recibido: \""+v2+"\"", v2);
                    }else{
                        RESULT=g.generarCodigoOperaciones("GE",v1,v2,false); 
                    }
                }else if(v1.esEntero()){
                    if(!v2.esEntero()){
                        errorEncontrado();
                        report_error("Se esperaba un entero y se ha recibido: \""+v2+"\"", v2);
                    }else{
                        RESULT=g.generarCodigoOperaciones("GE",v1,v2,false); 
                    }
                }else{
                    if(!v2.esNull()){
                        errorEncontrado();
                        report_error("Se esperaba un null y se ha recibido: \""+v2+"\"", v2);
                    }else{
                        RESULT=g.generarCodigoOperaciones("GE",v1,v2,false); 
                    }
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expresiones ::= Operaciones MAYOR Operaciones 
            {
              TipoDato RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDato v1 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoDato v2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v1.esBoolean()){
                    if(!v2.esBoolean()){
                        errorEncontrado();
                        report_error("Se esperaba un boolean y se ha recibido: \""+v2+"\"", v2);
                    }else{
                        RESULT=g.generarCodigoOperaciones("GT",v1,v2,false);  
                    }
                }else if(v1.esEntero()){
                    if(!v2.esEntero()){
                        errorEncontrado();
                        report_error("Se esperaba un entero y se ha recibido: \""+v2+"\"", v2);
                    }else{
                        RESULT=g.generarCodigoOperaciones("GT",v1,v2,false); 
                    }
                }else{
                    if(!v2.esNull()){
                        errorEncontrado();
                        report_error("Se esperaba un null y se ha recibido: \""+v2+"\"", v2);
                    }else{
                        RESULT=g.generarCodigoOperaciones("GT",v1,v2,false); 
                    }
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expresiones ::= Operaciones MENORIGUAL Operaciones 
            {
              TipoDato RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDato v1 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoDato v2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v1.esBoolean()){
                    if(!v2.esBoolean()){
                        errorEncontrado();
                        report_error("Se esperaba un boolean y se ha recibido: \""+v2+"\"", v2);
                    }else{
                        RESULT=g.generarCodigoOperaciones("LE",v1,v2,false);  
                    }
                }else if(v1.esEntero()){
                    if(!v2.esEntero()){
                        errorEncontrado();
                        report_error("Se esperaba un entero y se ha recibido: \""+v2+"\"", v2);
                    }else{
                        RESULT=g.generarCodigoOperaciones("LE",v1,v2,false); 
                    }
                }else{
                    if(!v2.esNull()){
                        errorEncontrado();
                        report_error("Se esperaba un null y se ha recibido: \""+v2+"\"", v2);
                    }else{
                        RESULT=g.generarCodigoOperaciones("LE",v1,v2,false); 
                    }
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expresiones ::= Operaciones MENOR Operaciones 
            {
              TipoDato RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDato v1 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoDato v2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v1.esBoolean()){
                    if(!v2.esBoolean()){
                        errorEncontrado();
                        report_error("Se esperaba un boolean y se ha recibido: \""+v2+"\"", v2);
                    }else{
                        RESULT=g.generarCodigoOperaciones("LT",v1,v2,false); 
                    }
                }else if(v1.esEntero()){
                    if(!v2.esEntero()){
                        errorEncontrado();
                        report_error("Se esperaba un entero y se ha recibido: \""+v2+"\"", v2);
                    }else{
                        RESULT=g.generarCodigoOperaciones("LT",v1,v2,false);  
                    }
                }else{
                    if(!v2.esNull()){
                        errorEncontrado();
                        report_error("Se esperaba un null y se ha recibido: \""+v2+"\"", v2);
                    }else{
                        RESULT=g.generarCodigoOperaciones("LT",v1,v2,false);  
                    }
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expresiones ::= NOT Operaciones 
            {
              TipoDato RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoDato v = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v.esBoolean()){
                    RESULT=g.generarCodigoOperacionesNotResta("NOT",v,false);
                }else{
                    errorEncontrado();
                    report_error("Se esperaba un boolean y se ha recibido: \""+v+"\"", v);
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OperacionesAritmeticas ::= Operaciones SUMA Operaciones 
            {
              TipoDato RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDato v1 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoDato v2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(!v1.esEntero()){
                    errorEncontrado();
                    report_error("Se esperaba un entero y se ha recibido: \""+v1+"\"", v1);
                }
                if(!v2.esEntero()){
                    errorEncontrado();
                    report_error("Se esperaba un entero y se ha recibido: \""+v2+"\"", v2);
                }
                RESULT=g.generarCodigoOperaciones("ADD",v1,v2,true);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticas",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OperacionesAritmeticas ::= Operaciones RESTA Operaciones 
            {
              TipoDato RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDato v1 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoDato v2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(!v1.esEntero()){
                    errorEncontrado();
                    report_error("Se esperaba un entero y se ha recibido: \""+v1+"\"", v1);
                }
                if(!v2.esEntero()){
                    errorEncontrado();
                    report_error("Se esperaba un entero y se ha recibido: \""+v2+"\"", v2);
                }
                RESULT=g.generarCodigoOperaciones("SUB",v1,v2,true);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticas",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OperacionesAritmeticas ::= Operaciones MULTIPLICACION Operaciones 
            {
              TipoDato RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDato v1 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoDato v2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(!v1.esEntero()){
                    errorEncontrado();
                    report_error("Se esperaba un entero y se ha recibido: \""+v1+"\"", v1);
                }
                if(!v2.esEntero()){
                    errorEncontrado();
                    report_error("Se esperaba un entero y se ha recibido: \""+v2+"\"", v2);
                }
                RESULT=g.generarCodigoOperaciones("MULT",v1,v2,true);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticas",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OperacionesAritmeticas ::= Operaciones DIVISION Operaciones 
            {
              TipoDato RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDato v1 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoDato v2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(!v1.esEntero()){
                    errorEncontrado();
                    report_error("Se esperaba un entero y se ha recibido: \""+v1+"\"", v1);
                }
                if(!v2.esEntero()){
                    errorEncontrado();
                    report_error("Se esperaba un entero y se ha recibido: \""+v2+"\"", v2);
                }
                RESULT=g.generarCodigoOperaciones("DIV",v1,v2,true);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticas",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OperacionesAritmeticas ::= Operaciones MODULO Operaciones 
            {
              TipoDato RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TipoDato v1 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoDato v2 = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(!v1.esEntero()){
                    errorEncontrado();
                    report_error("Se esperaba un entero y se ha recibido: \""+v1+"\"", v1);
                }
                if(!v2.esEntero()){
                    errorEncontrado();
                    report_error("Se esperaba un entero y se ha recibido: \""+v2+"\"", v2);
                }
                RESULT=g.generarCodigoOperaciones("MOD",v1,v2,true);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticas",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OperacionesAritmeticas ::= RESTA Operaciones 
            {
              TipoDato RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TipoDato v = (TipoDato)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(!v.esEntero()){
                    errorEncontrado();
                    report_error("Se esperaba un entero y se ha recibido: \""+v+"\"", v);
                }else{
                    RESULT=g.generarCodigoOperacionesNotResta("NEG",v,true);
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticas",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
