
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package CUP;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.*;
import Symbols.*;
import CUP.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\012\000\002\005\012\000\002\007\005\000" +
    "\002\010\004\000\002\010\002\000\002\006\006\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\002" +
    "\000\002\024\007\000\002\024\006\000\002\012\003\000" +
    "\002\012\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\013\012\000\002\014\003\000\002\014" +
    "\003\000\002\026\006\000\002\026\002\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\016\011\000" +
    "\002\017\013\000\002\020\015\000\002\021\005\000\002" +
    "\022\003\000\002\022\003\000\002\023\003\000\002\023" +
    "\003\000\002\025\003\000\002\025\003\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\004\000\002\030" +
    "\003\000\002\030\003\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\012\002\uffff\043\007\046\011\047\006\001" +
    "\002\000\012\002\uffff\043\007\046\011\047\006\001\002" +
    "\000\012\002\ufffd\043\ufffd\046\ufffd\047\ufffd\001\002\000" +
    "\004\004\214\001\002\000\004\027\211\001\002\000\004" +
    "\002\210\001\002\000\004\004\014\001\002\000\012\002" +
    "\ufffc\043\ufffc\046\ufffc\047\ufffc\001\002\000\012\002\ufffe" +
    "\043\ufffe\046\ufffe\047\ufffe\001\002\000\004\025\015\001" +
    "\002\000\006\044\021\045\017\001\002\000\004\004\204" +
    "\001\002\000\004\004\uffeb\001\002\000\004\026\022\001" +
    "\002\000\004\004\uffec\001\002\000\004\027\023\001\002" +
    "\000\032\004\041\030\uffef\035\032\037\027\040\033\041" +
    "\045\042\031\044\021\045\017\050\036\051\037\052\035" +
    "\001\002\000\032\004\041\030\uffef\035\032\037\027\040" +
    "\033\041\045\042\031\044\021\045\017\050\036\051\037" +
    "\052\035\001\002\000\032\004\uffe0\030\uffe0\035\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\044\uffe0\045\uffe0\050\uffe0" +
    "\051\uffe0\052\uffe0\001\002\000\032\004\041\030\uffef\035" +
    "\032\037\027\040\033\041\045\042\031\044\021\045\017" +
    "\050\036\051\037\052\035\001\002\000\004\025\174\001" +
    "\002\000\032\004\041\030\uffef\035\032\037\027\040\033" +
    "\041\045\042\031\044\021\045\017\050\036\051\037\052" +
    "\035\001\002\000\006\004\062\005\053\001\002\000\004" +
    "\025\154\001\002\000\004\027\144\001\002\000\032\004" +
    "\041\030\uffef\035\032\037\027\040\033\041\045\042\031" +
    "\044\021\045\017\050\036\051\037\052\035\001\002\000" +
    "\032\004\uffda\030\uffda\035\uffda\037\uffda\040\uffda\041\uffda" +
    "\042\uffda\044\uffda\045\uffda\050\uffda\051\uffda\052\uffda\001" +
    "\002\000\032\004\041\030\uffef\035\032\037\027\040\033" +
    "\041\045\042\031\044\021\045\017\050\036\051\037\052" +
    "\035\001\002\000\032\004\uffdb\030\uffdb\035\uffdb\037\uffdb" +
    "\040\uffdb\041\uffdb\042\uffdb\044\uffdb\045\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\001\002\000\032\004\041\030\uffef\035\032" +
    "\037\027\040\033\041\045\042\031\044\021\045\017\050" +
    "\036\051\037\052\035\001\002\000\004\031\136\001\002" +
    "\000\032\004\uffe1\030\uffe1\035\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\044\uffe1\045\uffe1\050\uffe1\051\uffe1\052\uffe1" +
    "\001\002\000\004\030\135\001\002\000\032\004\uffe2\030" +
    "\uffe2\035\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\044\uffe2" +
    "\045\uffe2\050\uffe2\051\uffe2\052\uffe2\001\002\000\004\025" +
    "\122\001\002\000\004\004\047\001\002\000\004\031\050" +
    "\001\002\000\016\004\062\005\053\007\060\024\057\055" +
    "\052\056\055\001\002\000\040\006\071\007\100\010\072" +
    "\011\077\012\076\013\073\014\065\015\074\016\075\017" +
    "\070\020\067\021\064\022\101\023\066\032\121\001\002" +
    "\000\042\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb" +
    "\022\uffcb\023\uffcb\026\uffcb\032\uffcb\001\002\000\042\006" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\026\uffd6\032\uffd6\001\002\000\042\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\026\uffea" +
    "\032\uffea\001\002\000\042\006\uffca\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\023\uffca\026\uffca\032\uffca\001" +
    "\002\000\042\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\026\uffe8\032\uffe8\001\002\000\016" +
    "\004\062\005\053\007\060\024\057\055\052\056\055\001" +
    "\002\000\016\004\062\005\053\007\060\024\057\055\052" +
    "\056\055\001\002\000\042\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\023\uffe9\026\uffe9\032\uffe9\001" +
    "\002\000\042\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\026\uffd7\032\uffd7\001\002\000\042" +
    "\006\uffc4\007\uffc4\010\072\011\077\012\076\013\073\014" +
    "\065\015\074\016\075\017\070\020\067\021\064\022\101" +
    "\023\066\026\uffc4\032\uffc4\001\002\000\016\004\062\005" +
    "\053\007\060\024\057\055\052\056\055\001\002\000\016" +
    "\004\062\005\053\007\060\024\057\055\052\056\055\001" +
    "\002\000\016\004\062\005\053\007\060\024\057\055\052" +
    "\056\055\001\002\000\016\004\062\005\053\007\060\024" +
    "\057\055\052\056\055\001\002\000\016\004\062\005\053" +
    "\007\060\024\057\055\052\056\055\001\002\000\016\004" +
    "\062\005\053\007\060\024\057\055\052\056\055\001\002" +
    "\000\016\004\062\005\053\007\060\024\057\055\052\056" +
    "\055\001\002\000\016\004\062\005\053\007\060\024\057" +
    "\055\052\056\055\001\002\000\016\004\062\005\053\007" +
    "\060\024\057\055\052\056\055\001\002\000\016\004\062" +
    "\005\053\007\060\024\057\055\052\056\055\001\002\000" +
    "\016\004\062\005\053\007\060\024\057\055\052\056\055" +
    "\001\002\000\016\004\062\005\053\007\060\024\057\055" +
    "\052\056\055\001\002\000\016\004\062\005\053\007\060" +
    "\024\057\055\052\056\055\001\002\000\016\004\062\005" +
    "\053\007\060\024\057\055\052\056\055\001\002\000\042" +
    "\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\026\uffd4\032\uffd4\001\002\000\042\006\uffc8\007" +
    "\uffc8\010\072\011\077\012\076\013\073\014\065\015\074" +
    "\016\075\017\070\020\067\021\064\022\101\023\066\026" +
    "\uffc8\032\uffc8\001\002\000\042\006\uffc6\007\uffc6\010\072" +
    "\011\077\012\076\013\073\014\065\015\074\016\075\017" +
    "\070\020\067\021\064\022\101\023\066\026\uffc6\032\uffc6" +
    "\001\002\000\042\006\uffc5\007\uffc5\010\072\011\077\012" +
    "\076\013\073\014\065\015\074\016\075\017\070\020\067" +
    "\021\064\022\101\023\066\026\uffc5\032\uffc5\001\002\000" +
    "\042\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\026\uffcf\032\uffcf\001\002\000\042\006\uffd0" +
    "\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\026\uffd0\032\uffd0\001\002\000\042\006\uffd2\007\uffd2\010" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\026\uffd2\032" +
    "\uffd2\001\002\000\042\006\uffc7\007\uffc7\010\072\011\077" +
    "\012\076\013\073\014\065\015\074\016\075\017\070\020" +
    "\067\021\064\022\101\023\066\026\uffc7\032\uffc7\001\002" +
    "\000\042\006\uffc9\007\uffc9\010\072\011\077\012\076\013" +
    "\073\014\065\015\074\016\075\017\070\020\067\021\064" +
    "\022\101\023\066\026\uffc9\032\uffc9\001\002\000\042\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\026\uffcd\032\uffcd\001\002\000\042\006\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\026\uffd1" +
    "\032\uffd1\001\002\000\042\006\uffd3\007\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\023\uffd3\026\uffd3\032\uffd3\001" +
    "\002\000\042\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce" +
    "\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\026\uffce\032\uffce\001\002\000\042" +
    "\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\026\uffd5\032\uffd5\001\002\000\042\006\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\026" +
    "\uffcc\032\uffcc\001\002\000\034\004\uffee\030\uffee\032\uffee" +
    "\035\uffee\037\uffee\040\uffee\041\uffee\042\uffee\044\uffee\045" +
    "\uffee\050\uffee\051\uffee\052\uffee\001\002\000\010\004\041" +
    "\044\021\045\017\001\002\000\004\032\124\001\002\000" +
    "\016\004\062\005\053\007\060\024\057\055\052\056\055" +
    "\001\002\000\036\006\071\007\100\010\072\011\077\012" +
    "\076\013\073\014\065\015\074\016\075\017\070\020\067" +
    "\021\064\022\101\023\066\001\002\000\040\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\032" +
    "\127\001\002\000\002\001\002\000\004\026\131\001\002" +
    "\000\004\027\132\001\002\000\032\004\041\030\uffef\035" +
    "\032\037\027\040\033\041\045\042\031\044\021\045\017" +
    "\050\036\051\037\052\035\001\002\000\004\030\134\001" +
    "\002\000\032\004\uffdd\030\uffdd\035\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\044\uffdd\045\uffdd\050\uffdd\051\uffdd\052" +
    "\uffdd\001\002\000\012\002\ufffb\043\ufffb\046\ufffb\047\ufffb" +
    "\001\002\000\016\004\062\005\053\007\060\024\057\055" +
    "\052\056\055\001\002\000\040\006\071\007\100\010\072" +
    "\011\077\012\076\013\073\014\065\015\074\016\075\017" +
    "\070\020\067\021\064\022\101\023\066\032\140\001\002" +
    "\000\034\004\uffed\030\uffed\032\uffed\035\uffed\037\uffed\040" +
    "\uffed\041\uffed\042\uffed\044\uffed\045\uffed\050\uffed\051\uffed" +
    "\052\uffed\001\002\000\004\030\ufff5\001\002\000\004\030" +
    "\ufff1\001\002\000\004\030\ufff0\001\002\000\032\004\041" +
    "\030\uffef\035\032\037\027\040\033\041\045\042\031\044" +
    "\021\045\017\050\036\051\037\052\035\001\002\000\004" +
    "\030\146\001\002\000\004\037\147\001\002\000\004\025" +
    "\150\001\002\000\016\004\062\005\053\007\060\024\057" +
    "\055\052\056\055\001\002\000\040\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\026\152\001" +
    "\002\000\004\032\153\001\002\000\032\004\uffde\030\uffde" +
    "\035\uffde\037\uffde\040\uffde\041\uffde\042\uffde\044\uffde\045" +
    "\uffde\050\uffde\051\uffde\052\uffde\001\002\000\016\004\062" +
    "\005\053\007\060\024\057\055\052\056\055\001\002\000" +
    "\004\026\160\001\002\000\040\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\026\uffe5\001\002" +
    "\000\040\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\026\uffe6\001\002\000\004\027\161\001" +
    "\002\000\032\004\041\030\uffef\035\032\037\027\040\033" +
    "\041\045\042\031\044\021\045\017\050\036\051\037\052" +
    "\035\001\002\000\004\030\163\001\002\000\034\004\uffe3" +
    "\030\uffe3\035\uffe3\036\164\037\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\044\uffe3\045\uffe3\050\uffe3\051\uffe3\052\uffe3\001\002" +
    "\000\004\027\166\001\002\000\032\004\uffe7\030\uffe7\035" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\044\uffe7\045\uffe7" +
    "\050\uffe7\051\uffe7\052\uffe7\001\002\000\032\004\041\030" +
    "\uffef\035\032\037\027\040\033\041\045\042\031\044\021" +
    "\045\017\050\036\051\037\052\035\001\002\000\004\030" +
    "\170\001\002\000\032\004\uffe4\030\uffe4\035\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\044\uffe4\045\uffe4\050\uffe4\051" +
    "\uffe4\052\uffe4\001\002\000\004\032\172\001\002\000\032" +
    "\004\uffdc\030\uffdc\035\uffdc\037\uffdc\040\uffdc\041\uffdc\042" +
    "\uffdc\044\uffdc\045\uffdc\050\uffdc\051\uffdc\052\uffdc\001\002" +
    "\000\004\030\ufff4\001\002\000\016\004\062\005\053\007" +
    "\060\024\057\055\052\056\055\001\002\000\040\006\071" +
    "\007\100\010\072\011\077\012\076\013\073\014\065\015" +
    "\074\016\075\017\070\020\067\021\064\022\101\023\066" +
    "\026\176\001\002\000\004\027\177\001\002\000\032\004" +
    "\041\030\uffef\035\032\037\027\040\033\041\045\042\031" +
    "\044\021\045\017\050\036\051\037\052\035\001\002\000" +
    "\004\030\201\001\002\000\032\004\uffdf\030\uffdf\035\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf\045\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\001\002\000\004\030\ufff2\001\002" +
    "\000\004\030\ufff3\001\002\000\006\026\ufff7\033\205\001" +
    "\002\000\006\044\021\045\017\001\002\000\004\026\ufff9" +
    "\001\002\000\004\026\ufff8\001\002\000\004\002\001\001" +
    "\002\000\032\004\041\030\uffef\035\032\037\027\040\033" +
    "\041\045\042\031\044\021\045\017\050\036\051\037\052" +
    "\035\001\002\000\004\030\213\001\002\000\012\002\ufff6" +
    "\043\ufff6\046\ufff6\047\ufff6\001\002\000\004\025\215\001" +
    "\002\000\006\044\021\045\017\001\002\000\004\026\217" +
    "\001\002\000\004\027\220\001\002\000\032\004\041\030" +
    "\uffef\035\032\037\027\040\033\041\045\042\031\044\021" +
    "\045\017\050\036\051\037\052\035\001\002\000\004\030" +
    "\222\001\002\000\012\002\ufffa\043\ufffa\046\ufffa\047\ufffa" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\014\002\007\003\003\004\012\005\004\006" +
    "\011\001\001\000\014\002\222\003\003\004\012\005\004" +
    "\006\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\017\012\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\011\042\012\045\013\027\015\023\016\043\017\041" +
    "\020\024\021\025\022\033\024\037\001\001\000\026\011" +
    "\202\012\045\013\027\015\023\016\043\017\041\020\024" +
    "\021\025\022\033\024\037\001\001\000\002\001\001\000" +
    "\026\011\201\012\045\013\027\015\023\016\043\017\041" +
    "\020\024\021\025\022\033\024\037\001\001\000\002\001" +
    "\001\000\026\011\172\012\045\013\027\015\023\016\043" +
    "\017\041\020\024\021\025\022\033\024\037\001\001\000" +
    "\004\025\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\011\142\012\045\013\027\015\023\016\043\017" +
    "\041\020\024\021\025\022\033\024\037\001\001\000\002" +
    "\001\001\000\026\011\141\012\045\013\027\015\023\016" +
    "\043\017\041\020\024\021\025\022\033\024\037\001\001" +
    "\000\002\001\001\000\026\011\140\012\045\013\027\015" +
    "\023\016\043\017\041\020\024\021\025\022\033\024\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\055\027\050\030\060\031" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\025\055\027\117\030\060\031\053\001\001" +
    "\000\012\025\055\027\062\030\060\031\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\025\055\027\116\030\060\031\053\001\001\000\012\025" +
    "\055\027\115\030\060\031\053\001\001\000\012\025\055" +
    "\027\114\030\060\031\053\001\001\000\012\025\055\027" +
    "\113\030\060\031\053\001\001\000\012\025\055\027\112" +
    "\030\060\031\053\001\001\000\012\025\055\027\111\030" +
    "\060\031\053\001\001\000\012\025\055\027\110\030\060" +
    "\031\053\001\001\000\012\025\055\027\107\030\060\031" +
    "\053\001\001\000\012\025\055\027\106\030\060\031\053" +
    "\001\001\000\012\025\055\027\105\030\060\031\053\001" +
    "\001\000\012\025\055\027\104\030\060\031\053\001\001" +
    "\000\012\025\055\027\103\030\060\031\053\001\001\000" +
    "\012\025\055\027\102\030\060\031\053\001\001\000\012" +
    "\025\055\027\101\030\060\031\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\045" +
    "\024\122\001\001\000\002\001\001\000\012\025\055\027" +
    "\124\030\125\031\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\011\132\012\045\013\027\015\023" +
    "\016\043\017\041\020\024\021\025\022\033\024\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\055\027\136\030\060\031\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\011\144\012\045\013" +
    "\027\015\023\016\043\017\041\020\024\021\025\022\033" +
    "\024\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\025\055\027\124\030\150\031\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\154\025\155\027\124\030\156\031\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\011\161\012\045\013\027" +
    "\015\023\016\043\017\041\020\024\021\025\022\033\024" +
    "\037\001\001\000\002\001\001\000\004\026\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\011\166\012" +
    "\045\013\027\015\023\016\043\017\041\020\024\021\025" +
    "\022\033\024\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\055\027\174\030\060\031\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\011\177\012\045" +
    "\013\027\015\023\016\043\017\041\020\024\021\025\022" +
    "\033\024\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\205\001" +
    "\001\000\006\007\206\012\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\011\211\012" +
    "\045\013\027\015\023\016\043\017\041\020\024\021\025" +
    "\022\033\024\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\215\012\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\011\220\012" +
    "\045\013\027\015\023\016\043\017\041\020\024\021\025" +
    "\022\033\024\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private TablaDeSimbolos ts = new TablaDeSimbolos();

    public void printVars(){
        ts.printVars(System.out);
    }
    /**
    * Nos permite saber si se ha detectado un error:
    *   -true: Se ha detectado error
    *   -false: No se ha detectado error
    * En caso de true el funcionamiento será limitado hasta finalizar de procesar
    * la entrada, caso donde lo vuelve a poner a false.
    **/
    private boolean errorSemantic = false;
    
    /*
        -------------------GESTION DE ERRORES---------------------------
    */

    public void errorEncontrado(){
        errorSemantic= true;
    }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception{
        report_error("Error sintactico irrecuperable", cur_token);
        done_parsing();
    }

    @Override
    public void syntax_error(Symbol cur_token){
        report_error("de sintaxis", cur_token);
    }
    
    @Override
    public void report_error(String message, Object info){
        StringBuilder msg = new StringBuilder("ERROR:");
        if(info instanceof Symbol){
            ComplexSymbol token = (ComplexSymbol) info;
            Location l = token.getLeft();

            if(l != null){
                msg.append(" (fila: " + l.getLine() + ", columna: " + l.getColumn() + ")");
            }
        }
        msg.append(": " + message);
        
        System.err.println(msg);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception{
        report_error("Error irrecuperable (" + message + ")", info);
        done_parsing();
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Bloque EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Bloque ::= BloqueP Bloque 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Bloque ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BloqueP ::= Procedimiento 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueP",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BloqueP ::= Funcion 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueP",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BloqueP ::= Main 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueP",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Procedimiento ::= PROC IDENTIFICADOR LPARENTESIS Atributos RPARENTESIS LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Procedimiento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Funcion ::= FUNT IDENTIFICADOR LPARENTESIS Atributos RPARENTESIS LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Atributos ::= Datos IDENTIFICADOR AtributosP 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atributos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // AtributosP ::= COMA Atributos 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AtributosP",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AtributosP ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AtributosP",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Main ::= MAIN LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instrucciones ::= Asignaciones Instrucciones 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instrucciones ::= Condicionales Instrucciones 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instrucciones ::= Bucles Instrucciones 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Instrucciones ::= Returns Instrucciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Instrucciones ::= BREAK Instrucciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Instrucciones ::= Prints Instrucciones 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Instrucciones ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Asignaciones ::= Datos IDENTIFICADOR ASIGNACION Operaciones PUNTOCOMA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolDatos v = (SymbolDatos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOperaciones v2 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                if(errorSemantic){
                    errorSemantic = false;
                    RESULT = new SymbolAsignaciones();
                }else{
                    switch((int)v.value){
                        case ParserSym.INT ->{
                            if (v2.value instanceof Integer){
                                if((!ts.estaBoolean(v1))&&(!ts.estaInteger(v1))){
                                    ts.addSymbol(v1,(int)v2.value); 
                                    RESULT = new SymbolAsignaciones((int)v2.value);
                                }else{
                                    errorSemantic = true;
                                    report_error("El identificador "+v1+" ya se ha definido con anterioridad",v1);
                                    RESULT = new SymbolAsignaciones();
                                }
                            }else{
                                errorSemantic = true;
                                report_error("Se está añadiendo un booleano a un entero",v2);
                                RESULT = new SymbolAsignaciones();
                            }
                        }
                        case ParserSym.BOOL ->{
                            if (v2.value instanceof Boolean){
                                if((!ts.estaBoolean(v1))&&(!ts.estaInteger(v1))){
                                    ts.addSymbol(v1,(boolean)v2.value); 
                                    RESULT = new SymbolAsignaciones((boolean)v2.value);
                                }else{
                                    errorSemantic = true;
                                    report_error("El identificador "+v1+" ya se ha definido con anterioridad",v1);
                                    RESULT = new SymbolAsignaciones();
                                }
                            }else{
                                errorSemantic = true;
                                report_error("Se está añadiendo un entero a un booleano",v2);
                                RESULT = new SymbolAsignaciones();
                            }
                        }
                    }
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignaciones",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Asignaciones ::= IDENTIFICADOR ASIGNACION Operaciones PUNTOCOMA 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOperaciones v2 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                if(errorSemantic){
                    errorSemantic = false;
                    RESULT = new SymbolAsignaciones();
                }else{
                    if (v2.value instanceof Integer){
                        if((!ts.estaBoolean(v1))&&(ts.estaInteger(v1))){
                            ts.addSymbol(v1,(int)v2.value); 
                            RESULT = new SymbolAsignaciones((int)v2.value);
                         }else if(ts.estaBoolean(v1)){
                            errorSemantic = true;
                            report_error("El identificador "+v1+" es un boolano, estas añadiendo un entero",v2);
                            RESULT = new SymbolAsignaciones();
                         }else{
                                errorSemantic = true;
                                report_error("El identificador "+v1+" ya se ha definido con anterioridad",v1);
                                RESULT = new SymbolAsignaciones();
                         }
                    }else{
                        if((ts.estaBoolean(v1))&&(!ts.estaInteger(v1))){
                            ts.addSymbol(v1,(int)v2.value); 
                            RESULT = new SymbolAsignaciones((int)v2.value);
                         }else if(ts.estaInteger(v1)){
                            errorSemantic = true;
                            report_error("El identificador "+v1+" es un entero, estas añadiendo un booleano",v2);
                            RESULT = new SymbolAsignaciones();
                         }else{
                                errorSemantic = true;
                                report_error("El identificador "+v1+" ya se ha definido con anterioridad",v1);
                                RESULT = new SymbolAsignaciones();
                         }
                    }
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignaciones",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Datos ::= INT 
            {
              SymbolDatos RESULT =null;
		
                RESULT = new SymbolDatos(ParserSym.INT);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Datos",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Datos ::= BOOL 
            {
              SymbolDatos RESULT =null;
		
                RESULT = new SymbolDatos(ParserSym.BOOL);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Datos",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Operaciones ::= OperacionesAritmeticas 
            {
              SymbolOperaciones RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperacionesAritmeticas v = (SymbolOperacionesAritmeticas)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(errorSemantic){
                    RESULT = new SymbolOperaciones();
                }else{
                    RESULT = new SymbolOperaciones((int)v.value);
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operaciones",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Operaciones ::= Expresiones 
            {
              SymbolOperaciones RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresiones v = (SymbolExpresiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(errorSemantic){
                    RESULT = new SymbolOperaciones();
                }else{
                    RESULT = new SymbolOperaciones((boolean)v.value);
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operaciones",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Operaciones ::= ID 
            {
              SymbolOperaciones RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolID v = (SymbolID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(errorSemantic){
                    RESULT = new SymbolOperaciones();
                }else{
                    if(v.value instanceof Boolean){
                        RESULT = new SymbolOperaciones((boolean)v.value);
                    }else{
                        RESULT = new SymbolOperaciones((int)v.value);
                    } 
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operaciones",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Condicionales ::= IF LPARENTESIS ExpresionesCondicional RPARENTESIS LLLAVE Instrucciones RLLAVE Else 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condicionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ExpresionesCondicional ::= Expresiones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesCondicional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ExpresionesCondicional ::= ID 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesCondicional",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Else ::= ELSE LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Else ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Bucles ::= While 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bucles",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Bucles ::= Do 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bucles",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Bucles ::= For 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bucles",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // While ::= WHILE LPARENTESIS Operaciones RPARENTESIS LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("While",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Do ::= DO LLLAVE Instrucciones RLLAVE WHILE LPARENTESIS Expresiones RPARENTESIS PUNTOCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Do",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // For ::= FOR LPARENTESIS Asignaciones PUNTOCOMA Expresiones PUNTOCOMA Incremento RPARENTESIS LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("For",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Returns ::= RETURN ID PUNTOCOMA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolID v = (SymbolID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                //RESULT = new SymbolReturns(v.value);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Returns",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Prints ::= PRINT 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prints",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Prints ::= PRINTLN 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Prints",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Enters ::= ENTER 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Enters",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Enters ::= ENTERLN 
            {
              Object RESULT =null;
		
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Enters",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ID ::= IDENTIFICADOR 
            {
              SymbolID RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(ts.estaInteger(v)){
                    int valor = ts.getSymbolValueInteger(v);
                    RESULT = new SymbolID(valor);
                }else if (ts.estaBoolean(v)){
                    boolean valor = ts.getSymbolValueBoolean(v);
                    RESULT = new SymbolID(valor);
                }else{
                    errorSemantic = true;
                    report_error("Identificador no definido \""+v+"\"", v);
                    RESULT = new SymbolID();
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ID ::= valor 
            {
              SymbolID RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolID(v);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expresiones ::= Operaciones AND Operaciones 
            {
              SymbolExpresiones RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperaciones v1 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperaciones v2 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresiones(v1, ParserSym.AND,v2,parser);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresiones ::= Operaciones OR Operaciones 
            {
              SymbolExpresiones RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperaciones v1 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperaciones v2 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresiones(v1, ParserSym.OR,v2,parser);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresiones ::= Operaciones XOR Operaciones 
            {
              SymbolExpresiones RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperaciones v1 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperaciones v2 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresiones(v1, ParserSym.XOR,v2,parser);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresiones ::= Operaciones EQUIVALENTE Operaciones 
            {
              SymbolExpresiones RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperaciones v1 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperaciones v2 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresiones(v1, ParserSym.EQUIVALENTE,v2,parser);      
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresiones ::= Operaciones NOEQUIVALENTE Operaciones 
            {
              SymbolExpresiones RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperaciones v1 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperaciones v2 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresiones(v1, ParserSym.NOEQUIVALENTE,v2,parser); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresiones ::= Operaciones MAYORIGUAL Operaciones 
            {
              SymbolExpresiones RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperaciones v1 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperaciones v2 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresiones(v1, ParserSym.MAYORIGUAL,v2,parser);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresiones ::= Operaciones MAYOR Operaciones 
            {
              SymbolExpresiones RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperaciones v1 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperaciones v2 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresiones(v1, ParserSym.MAYOR,v2,parser);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresiones ::= Operaciones MENORIGUAL Operaciones 
            {
              SymbolExpresiones RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperaciones v1 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperaciones v2 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresiones(v1, ParserSym.MENORIGUAL,v2,parser);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresiones ::= Operaciones MENOR Operaciones 
            {
              SymbolExpresiones RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperaciones v1 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperaciones v2 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresiones(v1, ParserSym.MENOR,v2,parser); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresiones ::= NOT Operaciones 
            {
              SymbolExpresiones RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperaciones v = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v.value instanceof Boolean){
                    RESULT = new SymbolExpresiones(!(boolean)v.value);
                }else{
                    errorSemantic = true;
                    report_error("Se está pasando por parametro un entero cuando debería ser booleano: Valor pasado -> " + v , v);
                    RESULT = new SymbolExpresiones();
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresiones ::= TRUE 
            {
              SymbolExpresiones RESULT =null;
		
                RESULT = new SymbolExpresiones(true);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresiones ::= FALSE 
            {
              SymbolExpresiones RESULT =null;
		
                RESULT = new SymbolExpresiones(false);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OperacionesAritmeticas ::= Operaciones SUMA Operaciones 
            {
              SymbolOperacionesAritmeticas RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperaciones v1 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperaciones v2 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v1.value instanceof Integer){
                    RESULT = new SymbolOperacionesAritmeticas((int)v1.value,ParserSym.SUMA, v2,parser);
                }else{
                    errorSemantic = true;
                    report_error("Se está pasando por parametro booleano cuando debería ser entero: Valor pasado -> " + v1 , v1);
                    RESULT = new SymbolOperacionesAritmeticas();
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticas",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OperacionesAritmeticas ::= Operaciones RESTA Operaciones 
            {
              SymbolOperacionesAritmeticas RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperaciones v1 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperaciones v2 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v1.value instanceof Integer){
                    RESULT = new SymbolOperacionesAritmeticas((int)v1.value,ParserSym.RESTA, v2,parser);
                }else{
                    errorSemantic = true;
                    report_error("Se está pasando por parametro booleano cuando debería ser entero: Valor pasado -> " + v1 , v1);
                    RESULT = new SymbolOperacionesAritmeticas();
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticas",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OperacionesAritmeticas ::= Operaciones MULTIPLICACION Operaciones 
            {
              SymbolOperacionesAritmeticas RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperaciones v1 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperaciones v2 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v1.value instanceof Integer){
                    RESULT = new SymbolOperacionesAritmeticas((int)v1.value,ParserSym.MULTIPLICACION, v2,parser);
                }else{
                    errorSemantic = true;
                    report_error("Se está pasando por parametro booleano cuando debería ser entero: Valor pasado -> " + v1 , v1);
                    RESULT = new SymbolOperacionesAritmeticas();
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticas",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OperacionesAritmeticas ::= Operaciones DIVISION Operaciones 
            {
              SymbolOperacionesAritmeticas RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperaciones v1 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperaciones v2 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v1.value instanceof Integer){
                    RESULT = new SymbolOperacionesAritmeticas((int)v1.value,ParserSym.DIVISION, v2,parser);
                }else{
                    errorSemantic = true;
                    report_error("Se está pasando por parametro booleano cuando debería ser entero: Valor pasado -> " + v1 , v1);
                    RESULT = new SymbolOperacionesAritmeticas();
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticas",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OperacionesAritmeticas ::= Operaciones MODULO Operaciones 
            {
              SymbolOperacionesAritmeticas RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolOperaciones v1 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperaciones v2 = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v1.value instanceof Integer){
                    RESULT = new SymbolOperacionesAritmeticas((int)v1.value,ParserSym.MODULO, v2,parser);
                }else{
                    errorSemantic = true;
                    report_error("Se está pasando por parametro booleano cuando debería ser entero: Valor pasado -> " + v1 , v1);
                    RESULT = new SymbolOperacionesAritmeticas();
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticas",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OperacionesAritmeticas ::= RESTA Operaciones 
            {
              SymbolOperacionesAritmeticas RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperaciones v = (SymbolOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                if(v.value instanceof Integer){
                    RESULT = new SymbolOperacionesAritmeticas(-1 * (int)v.value);
                }else{
                    errorSemantic = true;
                    report_error("Se está pasando por parametro booleano cuando debería ser entero: Valor pasado -> " + v , v);
                    RESULT = new SymbolOperacionesAritmeticas();
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticas",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
