
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package CUP;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.*;
import Symbols.*;
import CUP.*;
import java.io.PrintStream;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\012\000\002\005\012\000\002\007\005\000" +
    "\002\010\004\000\002\010\002\000\002\006\006\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\002\000\002\020\007\000\002\020\006" +
    "\000\002\021\003\000\002\021\003\000\002\013\012\000" +
    "\002\023\006\000\002\023\002\000\002\014\003\000\002" +
    "\014\003\000\002\015\011\000\002\016\013\000\002\017" +
    "\005\000\002\012\003\000\002\012\003\000\002\022\003" +
    "\000\002\022\003\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\004\000\002\024\003\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\026\005" +
    "\000\002\026\003\000\002\027\004\000\002\030\005\000" +
    "\002\030\005\000\002\031\004\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\033\005\000\002\033" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\012\002\uffff\041\007\044\011\045\006\001" +
    "\002\000\012\002\uffff\041\007\044\011\045\006\001\002" +
    "\000\012\002\ufffd\041\ufffd\044\ufffd\045\ufffd\001\002\000" +
    "\004\004\202\001\002\000\004\027\177\001\002\000\004" +
    "\002\176\001\002\000\004\004\014\001\002\000\012\002" +
    "\ufffc\041\ufffc\044\ufffc\045\ufffc\001\002\000\012\002\ufffe" +
    "\041\ufffe\044\ufffe\045\ufffe\001\002\000\004\025\015\001" +
    "\002\000\006\042\021\043\017\001\002\000\004\004\172" +
    "\001\002\000\004\004\uffe3\001\002\000\004\026\022\001" +
    "\002\000\004\004\uffe4\001\002\000\004\027\023\001\002" +
    "\000\022\004\040\030\ufff1\034\035\036\024\037\037\040" +
    "\036\042\021\043\017\001\002\000\004\025\164\001\002" +
    "\000\004\030\ufff5\001\002\000\004\030\uffe9\001\002\000" +
    "\004\004\160\001\002\000\004\030\ufff2\001\002\000\004" +
    "\030\157\001\002\000\004\030\ufff4\001\002\000\004\030" +
    "\ufff3\001\002\000\004\030\uffe8\001\002\000\004\025\144" +
    "\001\002\000\006\004\046\005\045\001\002\000\004\027" +
    "\077\001\002\000\004\031\041\001\002\000\010\004\046" +
    "\005\045\025\043\001\002\000\012\010\uffcb\011\uffcb\012" +
    "\uffcb\032\uffee\001\002\000\010\004\046\005\045\025\043" +
    "\001\002\000\010\010\063\011\065\012\064\001\002\000" +
    "\030\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\026\uffe1\032\uffe1\001\002\000" +
    "\030\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\026\uffe2\032\uffe2\001\002\000" +
    "\004\032\uffed\001\002\000\006\006\054\007\053\001\002" +
    "\000\004\032\052\001\002\000\004\030\uffef\001\002\000" +
    "\010\004\046\005\045\025\043\001\002\000\010\004\046" +
    "\005\045\025\043\001\002\000\006\026\uffd3\032\uffd3\001" +
    "\002\000\010\010\uffcb\011\uffcb\012\uffcb\001\002\000\006" +
    "\006\054\007\053\001\002\000\006\026\uffd2\032\uffd2\001" +
    "\002\000\006\006\054\007\053\001\002\000\006\026\uffd1" +
    "\032\uffd1\001\002\000\010\004\046\005\045\025\043\001" +
    "\002\000\010\004\046\005\045\025\043\001\002\000\010" +
    "\004\046\005\045\025\043\001\002\000\006\006\uffd0\007" +
    "\uffd0\001\002\000\010\010\063\011\065\012\064\001\002" +
    "\000\006\006\uffce\007\uffce\001\002\000\010\010\063\011" +
    "\065\012\064\001\002\000\006\006\uffcd\007\uffcd\001\002" +
    "\000\010\010\063\011\065\012\064\001\002\000\006\006" +
    "\uffcf\007\uffcf\001\002\000\004\026\076\001\002\000\010" +
    "\010\uffcc\011\uffcc\012\uffcc\001\002\000\022\004\040\030" +
    "\ufff1\034\035\036\024\037\037\040\036\042\021\043\017" +
    "\001\002\000\004\030\101\001\002\000\004\036\102\001" +
    "\002\000\004\025\103\001\002\000\012\004\046\005\045" +
    "\024\106\025\105\001\002\000\016\013\uffd4\014\132\015" +
    "\133\016\135\017\134\020\uffd4\001\002\000\012\004\046" +
    "\005\045\024\106\025\105\001\002\000\010\004\046\005" +
    "\045\025\105\001\002\000\004\026\124\001\002\000\006" +
    "\013\120\020\121\001\002\000\012\021\112\022\113\023" +
    "\114\026\uffdc\001\002\000\012\004\046\005\045\024\106" +
    "\025\105\001\002\000\012\004\046\005\045\024\106\025" +
    "\105\001\002\000\012\004\046\005\045\024\106\025\105" +
    "\001\002\000\004\026\uffde\001\002\000\004\026\uffdf\001" +
    "\002\000\004\026\uffe0\001\002\000\010\004\046\005\045" +
    "\025\105\001\002\000\010\004\046\005\045\025\105\001" +
    "\002\000\012\021\uffda\022\uffda\023\uffda\026\uffda\001\002" +
    "\000\012\021\uffdb\022\uffdb\023\uffdb\026\uffdb\001\002\000" +
    "\004\032\125\001\002\000\004\030\uffe6\001\002\000\004" +
    "\026\uffd4\001\002\000\004\026\uffdd\001\002\000\004\026" +
    "\131\001\002\000\010\013\uffd5\020\uffd5\026\uffd5\001\002" +
    "\000\010\004\046\005\045\025\105\001\002\000\010\004" +
    "\046\005\045\025\105\001\002\000\010\004\046\005\045" +
    "\025\105\001\002\000\010\004\046\005\045\025\105\001" +
    "\002\000\012\021\uffd8\022\uffd8\023\uffd8\026\uffd8\001\002" +
    "\000\012\021\uffd6\022\uffd6\023\uffd6\026\uffd6\001\002\000" +
    "\012\021\uffd9\022\uffd9\023\uffd9\026\uffd9\001\002\000\012" +
    "\021\uffd7\022\uffd7\023\uffd7\026\uffd7\001\002\000\004\032" +
    "\143\001\002\000\004\030\uffe5\001\002\000\012\004\046" +
    "\005\045\024\106\025\105\001\002\000\004\026\146\001" +
    "\002\000\004\027\147\001\002\000\022\004\040\030\ufff1" +
    "\034\035\036\024\037\037\040\036\042\021\043\017\001" +
    "\002\000\004\030\151\001\002\000\006\030\uffea\035\152" +
    "\001\002\000\004\027\154\001\002\000\004\030\uffec\001" +
    "\002\000\022\004\040\030\ufff1\034\035\036\024\037\037" +
    "\040\036\042\021\043\017\001\002\000\004\030\156\001" +
    "\002\000\004\030\uffeb\001\002\000\012\002\ufffb\041\ufffb" +
    "\044\ufffb\045\ufffb\001\002\000\004\031\161\001\002\000" +
    "\010\004\046\005\045\025\043\001\002\000\004\032\163" +
    "\001\002\000\004\030\ufff0\001\002\000\012\004\046\005" +
    "\045\024\106\025\105\001\002\000\004\026\166\001\002" +
    "\000\004\027\167\001\002\000\022\004\040\030\ufff1\034" +
    "\035\036\024\037\037\040\036\042\021\043\017\001\002" +
    "\000\004\030\171\001\002\000\004\030\uffe7\001\002\000" +
    "\006\026\ufff7\033\173\001\002\000\006\042\021\043\017" +
    "\001\002\000\004\026\ufff9\001\002\000\004\026\ufff8\001" +
    "\002\000\004\002\001\001\002\000\022\004\040\030\ufff1" +
    "\034\035\036\024\037\037\040\036\042\021\043\017\001" +
    "\002\000\004\030\201\001\002\000\012\002\ufff6\041\ufff6" +
    "\044\ufff6\045\ufff6\001\002\000\004\025\203\001\002\000" +
    "\006\042\021\043\017\001\002\000\004\026\205\001\002" +
    "\000\004\027\206\001\002\000\022\004\040\030\ufff1\034" +
    "\035\036\024\037\037\040\036\042\021\043\017\001\002" +
    "\000\004\030\210\001\002\000\012\002\ufffa\041\ufffa\044" +
    "\ufffa\045\ufffa\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\014\002\007\003\003\004\012\005\004\006" +
    "\011\001\001\000\014\002\210\003\003\004\012\005\004" +
    "\006\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\017\012\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\011\030\012\026\013\031\014\032\015\025\016\033" +
    "\017\027\020\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\021\050\022" +
    "\041\027\046\031\047\033\043\001\001\000\002\001\001" +
    "\000\012\022\055\027\074\031\047\033\043\001\001\000" +
    "\004\032\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\055\031\060\033\043" +
    "\001\001\000\010\022\055\031\056\033\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\057\001\001" +
    "\000\002\001\001\000\004\030\061\001\001\000\002\001" +
    "\001\000\006\022\055\033\072\001\001\000\006\022\055" +
    "\033\070\001\001\000\006\022\055\033\066\001\001\000" +
    "\002\001\001\000\004\032\067\001\001\000\002\001\001" +
    "\000\004\032\071\001\001\000\002\001\001\000\004\032" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\011\077\012\026\013\031\014\032\015" +
    "\025\016\033\017\027\020\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\103\024" +
    "\106\025\110\026\107\001\001\000\002\001\001\000\012" +
    "\022\103\024\127\025\110\026\107\001\001\000\006\022" +
    "\125\026\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\022\103\024\116\025\110\026" +
    "\107\001\001\000\012\022\103\024\115\025\110\026\107" +
    "\001\001\000\012\022\103\024\114\025\110\026\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\103\025\122\026\107\001\001\000\010\022" +
    "\103\025\121\026\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\103\025\140\026\107\001\001\000\010\022" +
    "\103\025\137\026\107\001\001\000\010\022\103\025\136" +
    "\026\107\001\001\000\010\022\103\025\135\026\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\103\024\144\025\110\026\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\011\147\012\026\013" +
    "\031\014\032\015\025\016\033\017\027\020\024\001\001" +
    "\000\002\001\001\000\004\023\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\011\154\012\026\013\031" +
    "\014\032\015\025\016\033\017\027\020\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\021\161\022\041\027\046\031\047\033" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\103\024\164\025\110\026\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\011\167\012\026\013\031" +
    "\014\032\015\025\016\033\017\027\020\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\173\001\001" +
    "\000\006\007\174\012\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\011\177\012\026" +
    "\013\031\014\032\015\025\016\033\017\027\020\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\203\012\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\011\206\012\026\013\031\014\032" +
    "\015\025\016\033\017\027\020\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private HashMap<String, Integer>tsymbols = new HashMap<>();

    public int getSymbolValueInteger(String id){
        return (int) tsymbols.get(id);
    }
    
    public void addSymbol(String id, int value){
        if(tsymbols.get(id) == null){
            tsymbols.put(id,value);
        } else{
            tsymbols.replace(id,value);
        }
    }
    
    public void printVars(PrintStream out) {
        if (tsymbols.size() == 0) {
            out.println("No hi ha variables declarades");
        } else {
            String fmt = "%-8s: %f";
            tsymbols.forEach((k,v) -> out.println(String.format(fmt,k,v)));
        }
    }

    /**
    * Nos permite saber si se ha detectado un error:
    *   -true: Se ha detectado error
    *   -false: No se ha detectado error
    * En caso de true el funcionamiento será limitado hasta finalizar de procesar
    * la entrada, caso donde lo vuelve a poner a false.
    **/
    private boolean errorSemantic = false;
    
    /*
        -------------------GESTION DE ERRORES---------------------------
    */

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception{
        report_error("Error sintactico irrecuperable", cur_token);
        done_parsing();
    }

    @Override
    public void syntax_error(Symbol cur_token){
        report_error("de sintaxis", cur_token);
    }
    
    @Override
    public void report_error(String message, Object info){
        StringBuilder msg = new StringBuilder("ERROR");
        if(info instanceof Symbol){
            ComplexSymbol token = (ComplexSymbol) info;
            Location l = token.getLeft();

            if(l != null){
                msg.append(" (fila: )" + l.getLine() + ", columna: " + l.getColumn() + ")");
            }
        }
        msg.append(": " + message);
        
        System.err.println(msg);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception{
        report_error("Error irrecuperable (" + message + ")", info);
        done_parsing();
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Bloque EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Bloque ::= BloqueP Bloque 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Bloque ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BloqueP ::= Procedimiento 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueP",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BloqueP ::= Funcion 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueP",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BloqueP ::= Main 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueP",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Procedimiento ::= PROC IDENTIFICADOR LPARENTESIS Atributos RPARENTESIS LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Procedimiento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Funcion ::= FUNT IDENTIFICADOR LPARENTESIS Atributos RPARENTESIS LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Atributos ::= Datos IDENTIFICADOR AtributosP 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atributos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // AtributosP ::= COMA Atributos 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AtributosP",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AtributosP ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AtributosP",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Main ::= MAIN LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instrucciones ::= Asignaciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instrucciones ::= Condicionales 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instrucciones ::= Bucles 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Instrucciones ::= Returns 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Instrucciones ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Asignaciones ::= Datos IDENTIFICADOR ASIGNACION AsignacionesP PUNTOCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignaciones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Asignaciones ::= IDENTIFICADOR ASIGNACION AsignacionesP PUNTOCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignaciones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // AsignacionesP ::= ID 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsignacionesP",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AsignacionesP ::= OperacionesAritmeticas 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsignacionesP",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Condicionales ::= IF LPARENTESIS Expresiones RPARENTESIS LLLAVE Instrucciones RLLAVE Else 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condicionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Else ::= ELSE LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Else ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Bucles ::= While 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bucles",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Bucles ::= Do 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bucles",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // While ::= WHILE LPARENTESIS Expresiones RPARENTESIS LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("While",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Do ::= DO LLLAVE Instrucciones RLLAVE WHILE LPARENTESIS Expresiones RPARENTESIS PUNTOCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Do",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Returns ::= RETURN ID PUNTOCOMA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolID v = (SymbolID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                //RESULT = new SymbolReturns(v.value);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Returns",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Datos ::= INT 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Datos",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Datos ::= BOOL 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Datos",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ID ::= IDENTIFICADOR 
            {
              SymbolID RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                int valor = getSymbolValueInteger(v);
                RESULT = new SymbolID(valor);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ID ::= valor 
            {
              SymbolID RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolID((int)v);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expresiones ::= ExpresionesP AND Expresiones 
            {
              SymbolExpresiones RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExpresionesP v1 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresiones v2 = (SymbolExpresiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresiones((boolean)v1.value, ParserSym.AND,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expresiones ::= ExpresionesP OR Expresiones 
            {
              SymbolExpresiones RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExpresionesP v1 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresiones v2 = (SymbolExpresiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresiones((boolean)v1.value, ParserSym.OR,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expresiones ::= ExpresionesP XOR Expresiones 
            {
              SymbolExpresiones RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExpresionesP v1 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresiones v2 = (SymbolExpresiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresiones((boolean)v1.value, ParserSym.XOR,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expresiones ::= NOT Exp 
            {
              SymbolExpresiones RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExp v = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresiones(ParserSym.NOT,v);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expresiones ::= ExpresionesP 
            {
              SymbolExpresiones RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresionesP v = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresiones((boolean)v.value);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ExpresionesP ::= Exp EQUIVALENTE ExpresionesP 
            {
              SymbolExpresionesP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExp v1 = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresionesP v2 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresionesP((int)v1.value, ParserSym.EQUIVALENTE,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ExpresionesP ::= Exp NOEQUIVALENTE ExpresionesP 
            {
              SymbolExpresionesP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExp v1 = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresionesP v2 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresionesP((int)v1.value, ParserSym.NOEQUIVALENTE,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ExpresionesP ::= ID MAYORIGUAL ExpresionesP 
            {
              SymbolExpresionesP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolID v1 = (SymbolID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresionesP v2 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresionesP((int)v1.value, ParserSym.MAYORIGUAL,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExpresionesP ::= ID MAYOR ExpresionesP 
            {
              SymbolExpresionesP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolID v1 = (SymbolID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresionesP v2 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresionesP((int)v1.value, ParserSym.MAYOR,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ExpresionesP ::= ID MENORIGUAL ExpresionesP 
            {
              SymbolExpresionesP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolID v1 = (SymbolID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresionesP v2 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresionesP((int)v1.value, ParserSym.MENORIGUAL,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ExpresionesP ::= ID MENOR ExpresionesP 
            {
              SymbolExpresionesP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolID v1 = (SymbolID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresionesP v2 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresionesP((int)v1.value, ParserSym.MENOR,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesP",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp ::= LPARENTESIS Expresiones RPARENTESIS 
            {
              SymbolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpresiones v = (SymbolExpresiones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new SymbolExp((int)v.value);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp ::= ID 
            {
              SymbolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolID v = (SymbolID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExp((int)v.value);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OperacionesAritmeticas ::= MultiplicacionDivision OperacionesAritmeticasP 
            {
              SymbolOperacionesAritmeticas RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolMultiplicacionDivision v1 = (SymbolMultiplicacionDivision)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperacionesAritmeticasP v2 = (SymbolOperacionesAritmeticasP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolOperacionesAritmeticas((int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticas",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OperacionesAritmeticasP ::= SUMA MultiplicacionDivision OperacionesAritmeticasP 
            {
              SymbolOperacionesAritmeticasP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolMultiplicacionDivision v1 = (SymbolMultiplicacionDivision)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperacionesAritmeticasP v2 = (SymbolOperacionesAritmeticasP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolOperacionesAritmeticasP(ParserSym.SUMA,(int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticasP",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OperacionesAritmeticasP ::= RESTA MultiplicacionDivision OperacionesAritmeticasP 
            {
              SymbolOperacionesAritmeticasP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolMultiplicacionDivision v1 = (SymbolMultiplicacionDivision)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperacionesAritmeticasP v2 = (SymbolOperacionesAritmeticasP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolOperacionesAritmeticasP(ParserSym.RESTA,(int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticasP",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MultiplicacionDivision ::= FinalOperaciones MultiplicacionDivisionP 
            {
              SymbolMultiplicacionDivision RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFinalOperaciones v1 = (SymbolFinalOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMultiplicacionDivisionP v2 = (SymbolMultiplicacionDivisionP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolMultiplicacionDivision((int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicacionDivision",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MultiplicacionDivisionP ::= MULTIPLICACION FinalOperaciones MultiplicacionDivisionP 
            {
              SymbolMultiplicacionDivisionP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFinalOperaciones v1 = (SymbolFinalOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMultiplicacionDivisionP v2 = (SymbolMultiplicacionDivisionP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolMultiplicacionDivisionP(ParserSym.MULTIPLICACION,(int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicacionDivisionP",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MultiplicacionDivisionP ::= DIVISION FinalOperaciones MultiplicacionDivisionP 
            {
              SymbolMultiplicacionDivisionP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFinalOperaciones v1 = (SymbolFinalOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMultiplicacionDivisionP v2 = (SymbolMultiplicacionDivisionP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolMultiplicacionDivisionP(ParserSym.DIVISION,(int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicacionDivisionP",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MultiplicacionDivisionP ::= MODULO FinalOperaciones MultiplicacionDivisionP 
            {
              SymbolMultiplicacionDivisionP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFinalOperaciones v1 = (SymbolFinalOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMultiplicacionDivisionP v2 = (SymbolMultiplicacionDivisionP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolMultiplicacionDivisionP(ParserSym.MODULO,(int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicacionDivisionP",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FinalOperaciones ::= LPARENTESIS OperacionesAritmeticas RPARENTESIS 
            {
              SymbolFinalOperaciones RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOperacionesAritmeticas v = (SymbolOperacionesAritmeticas)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new SymbolFinalOperaciones((int)v.value);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FinalOperaciones",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FinalOperaciones ::= ID 
            {
              SymbolFinalOperaciones RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolID v = (SymbolID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolFinalOperaciones((int)v.value);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FinalOperaciones",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
