
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package CUP;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.*;
import Symbols.*;
import CUP.*;
import java.io.PrintStream;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\012\000\002\005\012\000\002\007\005\000" +
    "\002\010\004\000\002\010\002\000\002\006\006\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\002\000\002\020\007\000\002\020\006" +
    "\000\002\013\012\000\002\022\006\000\002\022\002\000" +
    "\002\014\003\000\002\014\003\000\002\015\011\000\002" +
    "\016\013\000\002\017\005\000\002\012\003\000\002\012" +
    "\003\000\002\021\003\000\002\021\003\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\004\000" +
    "\002\023\003\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\025\005\000\002\025\003\000\002\026\004" +
    "\000\002\027\005\000\002\027\005\000\002\027\002\000" +
    "\002\030\004\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\002\000\002\032\005\000\002\032" +
    "\003\000\002\032\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\012\002\uffff\043\007\046\011\047\006\001" +
    "\002\000\012\002\uffff\043\007\046\011\047\006\001\002" +
    "\000\012\002\ufffd\043\ufffd\046\ufffd\047\ufffd\001\002\000" +
    "\004\004\206\001\002\000\004\027\203\001\002\000\004" +
    "\002\202\001\002\000\004\004\014\001\002\000\012\002" +
    "\ufffc\043\ufffc\046\ufffc\047\ufffc\001\002\000\012\002\ufffe" +
    "\043\ufffe\046\ufffe\047\ufffe\001\002\000\004\025\015\001" +
    "\002\000\006\044\021\045\017\001\002\000\004\004\176" +
    "\001\002\000\004\004\uffe5\001\002\000\004\026\022\001" +
    "\002\000\004\004\uffe6\001\002\000\004\027\023\001\002" +
    "\000\022\004\040\030\ufff1\035\035\037\024\040\037\042" +
    "\036\044\021\045\017\001\002\000\004\025\170\001\002" +
    "\000\022\004\040\030\ufff1\035\035\037\024\040\037\042" +
    "\036\044\021\045\017\001\002\000\022\004\uffeb\030\uffeb" +
    "\035\uffeb\037\uffeb\040\uffeb\042\uffeb\044\uffeb\045\uffeb\001" +
    "\002\000\004\004\163\001\002\000\022\004\040\030\ufff1" +
    "\035\035\037\024\040\037\042\036\044\021\045\017\001" +
    "\002\000\004\030\161\001\002\000\022\004\040\030\ufff1" +
    "\035\035\037\024\040\037\042\036\044\021\045\017\001" +
    "\002\000\022\004\040\030\ufff1\035\035\037\024\040\037" +
    "\042\036\044\021\045\017\001\002\000\022\004\uffea\030" +
    "\uffea\035\uffea\037\uffea\040\uffea\042\uffea\044\uffea\045\uffea" +
    "\001\002\000\004\025\144\001\002\000\006\004\046\005" +
    "\050\001\002\000\004\027\077\001\002\000\004\031\041" +
    "\001\002\000\012\004\046\005\050\007\042\025\044\001" +
    "\002\000\012\004\046\005\050\007\042\025\044\001\002" +
    "\000\020\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\026" +
    "\uffcb\032\uffcb\001\002\000\012\004\046\005\050\007\042" +
    "\025\044\001\002\000\020\006\uffcd\007\uffcd\010\062\011" +
    "\064\012\063\026\uffcd\032\uffcd\001\002\000\034\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\026\uffe4\032\uffe4\001\002" +
    "\000\004\032\061\001\002\000\034\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\026\uffe3\032\uffe3\001\002\000\020\006" +
    "\053\007\052\010\uffd2\011\uffd2\012\uffd2\026\uffd2\032\uffd2" +
    "\001\002\000\012\004\046\005\050\007\042\025\044\001" +
    "\002\000\012\004\046\005\050\007\042\025\044\001\002" +
    "\000\020\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\026" +
    "\uffd5\032\uffd5\001\002\000\020\006\053\007\052\010\uffd2" +
    "\011\uffd2\012\uffd2\026\uffd2\032\uffd2\001\002\000\020\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\026\uffd4\032\uffd4" +
    "\001\002\000\020\006\053\007\052\010\uffd2\011\uffd2\012" +
    "\uffd2\026\uffd2\032\uffd2\001\002\000\020\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\026\uffd3\032\uffd3\001\002\000" +
    "\022\004\uffef\030\uffef\035\uffef\037\uffef\040\uffef\042\uffef" +
    "\044\uffef\045\uffef\001\002\000\012\004\046\005\050\007" +
    "\042\025\044\001\002\000\012\004\046\005\050\007\042" +
    "\025\044\001\002\000\012\004\046\005\050\007\042\025" +
    "\044\001\002\000\020\006\uffd1\007\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\026\uffd1\032\uffd1\001\002\000\020\006\uffcd\007" +
    "\uffcd\010\062\011\064\012\063\026\uffcd\032\uffcd\001\002" +
    "\000\020\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\026" +
    "\uffcf\032\uffcf\001\002\000\020\006\uffcd\007\uffcd\010\062" +
    "\011\064\012\063\026\uffcd\032\uffcd\001\002\000\020\006" +
    "\uffce\007\uffce\010\uffce\011\uffce\012\uffce\026\uffce\032\uffce" +
    "\001\002\000\020\006\uffcd\007\uffcd\010\062\011\064\012" +
    "\063\026\uffcd\032\uffcd\001\002\000\020\006\uffd0\007\uffd0" +
    "\010\uffd0\011\uffd0\012\uffd0\026\uffd0\032\uffd0\001\002\000" +
    "\004\026\075\001\002\000\020\006\uffcc\007\uffcc\010\uffcc" +
    "\011\uffcc\012\uffcc\026\uffcc\032\uffcc\001\002\000\020\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\026\uffca\032\uffca" +
    "\001\002\000\022\004\040\030\ufff1\035\035\037\024\040" +
    "\037\042\036\044\021\045\017\001\002\000\004\030\101" +
    "\001\002\000\004\037\102\001\002\000\004\025\103\001" +
    "\002\000\012\004\046\005\050\024\106\025\105\001\002" +
    "\000\016\013\uffd6\014\132\015\133\016\135\017\134\020" +
    "\uffd6\001\002\000\012\004\046\005\050\024\106\025\105" +
    "\001\002\000\010\004\046\005\050\025\105\001\002\000" +
    "\004\026\124\001\002\000\012\021\116\022\120\023\117" +
    "\026\uffde\001\002\000\006\013\112\020\113\001\002\000" +
    "\010\004\046\005\050\025\105\001\002\000\010\004\046" +
    "\005\050\025\105\001\002\000\012\021\uffdc\022\uffdc\023" +
    "\uffdc\026\uffdc\001\002\000\012\021\uffdd\022\uffdd\023\uffdd" +
    "\026\uffdd\001\002\000\012\004\046\005\050\024\106\025" +
    "\105\001\002\000\012\004\046\005\050\024\106\025\105" +
    "\001\002\000\012\004\046\005\050\024\106\025\105\001" +
    "\002\000\004\026\uffe1\001\002\000\004\026\uffe0\001\002" +
    "\000\004\026\uffe2\001\002\000\004\032\125\001\002\000" +
    "\022\004\uffe8\030\uffe8\035\uffe8\037\uffe8\040\uffe8\042\uffe8" +
    "\044\uffe8\045\uffe8\001\002\000\004\026\uffd6\001\002\000" +
    "\004\026\uffdf\001\002\000\004\026\131\001\002\000\010" +
    "\013\uffd7\020\uffd7\026\uffd7\001\002\000\010\004\046\005" +
    "\050\025\105\001\002\000\010\004\046\005\050\025\105" +
    "\001\002\000\010\004\046\005\050\025\105\001\002\000" +
    "\010\004\046\005\050\025\105\001\002\000\012\021\uffda" +
    "\022\uffda\023\uffda\026\uffda\001\002\000\012\021\uffd8\022" +
    "\uffd8\023\uffd8\026\uffd8\001\002\000\012\021\uffdb\022\uffdb" +
    "\023\uffdb\026\uffdb\001\002\000\012\021\uffd9\022\uffd9\023" +
    "\uffd9\026\uffd9\001\002\000\004\032\143\001\002\000\022" +
    "\004\uffe7\030\uffe7\035\uffe7\037\uffe7\040\uffe7\042\uffe7\044" +
    "\uffe7\045\uffe7\001\002\000\012\004\046\005\050\024\106" +
    "\025\105\001\002\000\004\026\146\001\002\000\004\027" +
    "\147\001\002\000\022\004\040\030\ufff1\035\035\037\024" +
    "\040\037\042\036\044\021\045\017\001\002\000\004\030" +
    "\151\001\002\000\024\004\uffec\030\uffec\035\uffec\036\152" +
    "\037\uffec\040\uffec\042\uffec\044\uffec\045\uffec\001\002\000" +
    "\004\027\154\001\002\000\022\004\uffee\030\uffee\035\uffee" +
    "\037\uffee\040\uffee\042\uffee\044\uffee\045\uffee\001\002\000" +
    "\022\004\040\030\ufff1\035\035\037\024\040\037\042\036" +
    "\044\021\045\017\001\002\000\004\030\156\001\002\000" +
    "\022\004\uffed\030\uffed\035\uffed\037\uffed\040\uffed\042\uffed" +
    "\044\uffed\045\uffed\001\002\000\004\030\ufff3\001\002\000" +
    "\004\030\ufff4\001\002\000\012\002\ufffb\043\ufffb\046\ufffb" +
    "\047\ufffb\001\002\000\004\030\ufff2\001\002\000\004\031" +
    "\164\001\002\000\012\004\046\005\050\007\042\025\044" +
    "\001\002\000\004\032\166\001\002\000\022\004\ufff0\030" +
    "\ufff0\035\ufff0\037\ufff0\040\ufff0\042\ufff0\044\ufff0\045\ufff0" +
    "\001\002\000\004\030\ufff5\001\002\000\012\004\046\005" +
    "\050\024\106\025\105\001\002\000\004\026\172\001\002" +
    "\000\004\027\173\001\002\000\022\004\040\030\ufff1\035" +
    "\035\037\024\040\037\042\036\044\021\045\017\001\002" +
    "\000\004\030\175\001\002\000\022\004\uffe9\030\uffe9\035" +
    "\uffe9\037\uffe9\040\uffe9\042\uffe9\044\uffe9\045\uffe9\001\002" +
    "\000\006\026\ufff7\033\177\001\002\000\006\044\021\045" +
    "\017\001\002\000\004\026\ufff9\001\002\000\004\026\ufff8" +
    "\001\002\000\004\002\001\001\002\000\022\004\040\030" +
    "\ufff1\035\035\037\024\040\037\042\036\044\021\045\017" +
    "\001\002\000\004\030\205\001\002\000\012\002\ufff6\043" +
    "\ufff6\046\ufff6\047\ufff6\001\002\000\004\025\207\001\002" +
    "\000\006\044\021\045\017\001\002\000\004\026\211\001" +
    "\002\000\004\027\212\001\002\000\022\004\040\030\ufff1" +
    "\035\035\037\024\040\037\042\036\044\021\045\017\001" +
    "\002\000\004\030\214\001\002\000\012\002\ufffa\043\ufffa" +
    "\046\ufffa\047\ufffa\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\014\002\007\003\003\004\012\005\004\006" +
    "\011\001\001\000\014\002\214\003\003\004\012\005\004" +
    "\006\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\017\012\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\011\030\012\026\013\031\014\032\015\025\016\033" +
    "\017\027\020\024\001\001\000\002\001\001\000\022\011" +
    "\166\012\026\013\031\014\032\015\025\016\033\017\027" +
    "\020\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\011\161\012\026\013\031\014\032\015\025\016\033" +
    "\017\027\020\024\001\001\000\002\001\001\000\022\011" +
    "\157\012\026\013\031\014\032\015\025\016\033\017\027" +
    "\020\024\001\001\000\022\011\156\012\026\013\031\014" +
    "\032\015\025\016\033\017\027\020\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\042\026\046" +
    "\030\050\032\044\001\001\000\012\021\042\026\075\030" +
    "\050\032\044\001\001\000\002\001\001\000\012\021\042" +
    "\026\073\030\050\032\044\001\001\000\004\031\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\053\001\001\000\010\021\042\030\056\032" +
    "\044\001\001\000\010\021\042\030\054\032\044\001\001" +
    "\000\002\001\001\000\004\027\055\001\001\000\002\001" +
    "\001\000\004\027\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\042\032\071\001\001\000\006\021" +
    "\042\032\067\001\001\000\006\021\042\032\065\001\001" +
    "\000\002\001\001\000\004\031\066\001\001\000\002\001" +
    "\001\000\004\031\070\001\001\000\002\001\001\000\004" +
    "\031\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\011\077\012\026" +
    "\013\031\014\032\015\025\016\033\017\027\020\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\103\023\106\024\107\025\110\001\001\000" +
    "\002\001\001\000\012\021\103\023\127\024\107\025\110" +
    "\001\001\000\006\021\125\025\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\103" +
    "\024\114\025\110\001\001\000\010\021\103\024\113\025" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\103\023\122\024\107\025\110\001\001\000\012\021" +
    "\103\023\121\024\107\025\110\001\001\000\012\021\103" +
    "\023\120\024\107\025\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\103\024\140\025\110" +
    "\001\001\000\010\021\103\024\137\025\110\001\001\000" +
    "\010\021\103\024\136\025\110\001\001\000\010\021\103" +
    "\024\135\025\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\021\103\023\144\024\107\025" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\011\147\012\026\013\031\014\032\015\025\016\033\017" +
    "\027\020\024\001\001\000\002\001\001\000\004\022\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\011" +
    "\154\012\026\013\031\014\032\015\025\016\033\017\027" +
    "\020\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\021\042\026\164\030" +
    "\050\032\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\021\103\023\170\024\107\025" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\011\173\012\026\013\031\014\032\015\025\016\033\017" +
    "\027\020\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\177\001\001\000\006\007\200\012\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\011\203\012\026\013\031\014\032\015\025\016" +
    "\033\017\027\020\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\207\012\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\011\212" +
    "\012\026\013\031\014\032\015\025\016\033\017\027\020" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private HashMap<String, Integer>tsymbols = new HashMap<>();

    public int getSymbolValueInteger(String id){
        return (int) tsymbols.get(id);
    }
    
    public void addSymbol(String id, int value){
        if(tsymbols.get(id) == null){
            tsymbols.put(id,value);
        } else{
            tsymbols.replace(id,value);
        }
    }
    
    public void printVars(PrintStream out) {
        if (tsymbols.size() == 0) {
            out.println("No hi ha variables declarades");
        } else {
            String fmt = "%-8s: %f";
            tsymbols.forEach((k,v) -> out.println(String.format(fmt,k,v)));
        }
    }

    /**
    * Nos permite saber si se ha detectado un error:
    *   -true: Se ha detectado error
    *   -false: No se ha detectado error
    * En caso de true el funcionamiento será limitado hasta finalizar de procesar
    * la entrada, caso donde lo vuelve a poner a false.
    **/
    private boolean errorSemantic = false;
    
    /*
        -------------------GESTION DE ERRORES---------------------------
    */

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception{
        report_error("Error sintactico irrecuperable", cur_token);
        done_parsing();
    }

    @Override
    public void syntax_error(Symbol cur_token){
        report_error("de sintaxis", cur_token);
    }
    
    @Override
    public void report_error(String message, Object info){
        StringBuilder msg = new StringBuilder("ERROR:");
        if(info instanceof Symbol){
            ComplexSymbol token = (ComplexSymbol) info;
            Location l = token.getLeft();

            if(l != null){
                msg.append(" (fila: " + l.getLine() + ", columna: " + l.getColumn() + ")");
            }
        }
        msg.append(": " + message);
        
        System.err.println(msg);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception{
        report_error("Error irrecuperable (" + message + ")", info);
        done_parsing();
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Bloque EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Bloque ::= BloqueP Bloque 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Bloque ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BloqueP ::= Procedimiento 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueP",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BloqueP ::= Funcion 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueP",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BloqueP ::= Main 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BloqueP",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Procedimiento ::= PROC IDENTIFICADOR LPARENTESIS Atributos RPARENTESIS LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Procedimiento",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Funcion ::= FUNT IDENTIFICADOR LPARENTESIS Atributos RPARENTESIS LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Funcion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Atributos ::= Datos IDENTIFICADOR AtributosP 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Atributos",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // AtributosP ::= COMA Atributos 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AtributosP",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // AtributosP ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AtributosP",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Main ::= MAIN LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instrucciones ::= Asignaciones Instrucciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instrucciones ::= Condicionales Instrucciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instrucciones ::= Bucles Instrucciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Instrucciones ::= Returns Instrucciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Instrucciones ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Asignaciones ::= Datos IDENTIFICADOR ASIGNACION OperacionesAritmeticas PUNTOCOMA 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOperacionesAritmeticas v2 = (SymbolOperacionesAritmeticas)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                addSymbol(v1,(int)v2.value); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignaciones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Asignaciones ::= IDENTIFICADOR ASIGNACION OperacionesAritmeticas PUNTOCOMA 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOperacionesAritmeticas v2 = (SymbolOperacionesAritmeticas)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                addSymbol(v1,(int)v2.value); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignaciones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Condicionales ::= IF LPARENTESIS Expresiones RPARENTESIS LLLAVE Instrucciones RLLAVE Else 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Condicionales",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Else ::= ELSE LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Else ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Bucles ::= While 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bucles",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Bucles ::= Do 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bucles",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // While ::= WHILE LPARENTESIS Expresiones RPARENTESIS LLLAVE Instrucciones RLLAVE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("While",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Do ::= DO LLLAVE Instrucciones RLLAVE WHILE LPARENTESIS Expresiones RPARENTESIS PUNTOCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Do",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Returns ::= RETURN ID PUNTOCOMA 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolID v = (SymbolID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                //RESULT = new SymbolReturns(v.value);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Returns",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Datos ::= INT 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Datos",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Datos ::= BOOL 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Datos",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ID ::= IDENTIFICADOR 
            {
              SymbolID RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                int valor = getSymbolValueInteger(v);
                RESULT = new SymbolID(valor);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ID ::= valor 
            {
              SymbolID RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int v = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolID((int)v);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expresiones ::= ExpresionesP AND Expresiones 
            {
              SymbolExpresiones RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExpresionesP v1 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresiones v2 = (SymbolExpresiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresiones((boolean)v1.value, ParserSym.AND,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expresiones ::= ExpresionesP OR Expresiones 
            {
              SymbolExpresiones RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExpresionesP v1 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresiones v2 = (SymbolExpresiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresiones((boolean)v1.value, ParserSym.OR,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expresiones ::= ExpresionesP XOR Expresiones 
            {
              SymbolExpresiones RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExpresionesP v1 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresiones v2 = (SymbolExpresiones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresiones((boolean)v1.value, ParserSym.XOR,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expresiones ::= NOT Exp 
            {
              SymbolExpresiones RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExp v = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresiones(ParserSym.NOT,v);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expresiones ::= ExpresionesP 
            {
              SymbolExpresiones RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresionesP v = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresiones((boolean)v.value);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expresiones",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ExpresionesP ::= Exp EQUIVALENTE ExpresionesP 
            {
              SymbolExpresionesP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExp v1 = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresionesP v2 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresionesP((int)v1.value, ParserSym.EQUIVALENTE,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ExpresionesP ::= Exp NOEQUIVALENTE ExpresionesP 
            {
              SymbolExpresionesP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExp v1 = (SymbolExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresionesP v2 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresionesP((int)v1.value, ParserSym.NOEQUIVALENTE,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ExpresionesP ::= ID MAYORIGUAL ExpresionesP 
            {
              SymbolExpresionesP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolID v1 = (SymbolID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresionesP v2 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresionesP((int)v1.value, ParserSym.MAYORIGUAL,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ExpresionesP ::= ID MAYOR ExpresionesP 
            {
              SymbolExpresionesP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolID v1 = (SymbolID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresionesP v2 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresionesP((int)v1.value, ParserSym.MAYOR,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ExpresionesP ::= ID MENORIGUAL ExpresionesP 
            {
              SymbolExpresionesP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolID v1 = (SymbolID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresionesP v2 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresionesP((int)v1.value, ParserSym.MENORIGUAL,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExpresionesP ::= ID MENOR ExpresionesP 
            {
              SymbolExpresionesP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolID v1 = (SymbolID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpresionesP v2 = (SymbolExpresionesP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExpresionesP((int)v1.value, ParserSym.MENOR,v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpresionesP",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp ::= LPARENTESIS Expresiones RPARENTESIS 
            {
              SymbolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpresiones v = (SymbolExpresiones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new SymbolExp((int)v.value);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp ::= ID 
            {
              SymbolExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolID v = (SymbolID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolExp((int)v.value);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OperacionesAritmeticas ::= MultiplicacionDivision OperacionesAritmeticasP 
            {
              SymbolOperacionesAritmeticas RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolMultiplicacionDivision v1 = (SymbolMultiplicacionDivision)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperacionesAritmeticasP v2 = (SymbolOperacionesAritmeticasP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolOperacionesAritmeticas((int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticas",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OperacionesAritmeticasP ::= SUMA MultiplicacionDivision OperacionesAritmeticasP 
            {
              SymbolOperacionesAritmeticasP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolMultiplicacionDivision v1 = (SymbolMultiplicacionDivision)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperacionesAritmeticasP v2 = (SymbolOperacionesAritmeticasP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolOperacionesAritmeticasP(ParserSym.SUMA,(int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticasP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OperacionesAritmeticasP ::= RESTA MultiplicacionDivision OperacionesAritmeticasP 
            {
              SymbolOperacionesAritmeticasP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolMultiplicacionDivision v1 = (SymbolMultiplicacionDivision)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperacionesAritmeticasP v2 = (SymbolOperacionesAritmeticasP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolOperacionesAritmeticasP(ParserSym.RESTA,(int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticasP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OperacionesAritmeticasP ::= 
            {
              SymbolOperacionesAritmeticasP RESULT =null;
		
                RESULT = new SymbolOperacionesAritmeticasP();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OperacionesAritmeticasP",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MultiplicacionDivision ::= FinalOperaciones MultiplicacionDivisionP 
            {
              SymbolMultiplicacionDivision RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFinalOperaciones v1 = (SymbolFinalOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMultiplicacionDivisionP v2 = (SymbolMultiplicacionDivisionP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolMultiplicacionDivision((int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicacionDivision",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MultiplicacionDivisionP ::= MULTIPLICACION FinalOperaciones MultiplicacionDivisionP 
            {
              SymbolMultiplicacionDivisionP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFinalOperaciones v1 = (SymbolFinalOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMultiplicacionDivisionP v2 = (SymbolMultiplicacionDivisionP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolMultiplicacionDivisionP(ParserSym.MULTIPLICACION,(int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicacionDivisionP",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MultiplicacionDivisionP ::= DIVISION FinalOperaciones MultiplicacionDivisionP 
            {
              SymbolMultiplicacionDivisionP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFinalOperaciones v1 = (SymbolFinalOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMultiplicacionDivisionP v2 = (SymbolMultiplicacionDivisionP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolMultiplicacionDivisionP(ParserSym.DIVISION,(int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicacionDivisionP",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MultiplicacionDivisionP ::= MODULO FinalOperaciones MultiplicacionDivisionP 
            {
              SymbolMultiplicacionDivisionP RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolFinalOperaciones v1 = (SymbolFinalOperaciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolMultiplicacionDivisionP v2 = (SymbolMultiplicacionDivisionP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolMultiplicacionDivisionP(ParserSym.MODULO,(int)v1.value, v2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicacionDivisionP",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MultiplicacionDivisionP ::= 
            {
              SymbolMultiplicacionDivisionP RESULT =null;
		
                RESULT = new SymbolMultiplicacionDivisionP();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicacionDivisionP",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FinalOperaciones ::= LPARENTESIS OperacionesAritmeticas RPARENTESIS 
            {
              SymbolFinalOperaciones RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOperacionesAritmeticas v = (SymbolOperacionesAritmeticas)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new SymbolFinalOperaciones((int)v.value);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FinalOperaciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FinalOperaciones ::= ID 
            {
              SymbolFinalOperaciones RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolID v = (SymbolID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolFinalOperaciones((int)v.value);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FinalOperaciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FinalOperaciones ::= RESTA OperacionesAritmeticas 
            {
              SymbolFinalOperaciones RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOperacionesAritmeticas v = (SymbolOperacionesAritmeticas)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new SymbolFinalOperaciones(-1 * (int)v.value);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FinalOperaciones",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
